/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/ClassesForTesting.swift:
    1|       |//
    2|       |//  EmployerForTesting.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 10/8/19.
    6|       |//  Copyright Â© 2019 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import SundeedQLiteLibrary
   11|       |
   12|       |class EmployeeForTesting: SundeedQLiter {
   13|       |    var id: String!
   14|       |    var firstName: String?
   15|      0|    required init() {}
   16|      0|    init(id: String) {
   17|      0|        self.id = id
   18|      0|    }
   19|    253|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   20|    253|        id <~> map["id"]+
   21|    253|        firstName <~> map["firstName"]
   22|    253|    }
   23|       |}
   24|       |
   25|       |class TypeConverter: SundeedQLiteConverter {
   26|      6|    func fromString(value: String) -> Any? {
   27|      6|        return Type.fromString(string: value)
   28|      6|    }
   29|     22|    func toString(value: Any?) -> String? {
   30|     22|        return (value as? Type)?.stringValue()
   31|     22|    }
   32|       |}
   33|       |
   34|       |enum Type {
   35|       |    case manager
   36|       |    case ceo
   37|       |    
   38|      0|    static func fromString(string: String) -> Self? {
   39|      0|        switch string {
   40|      0|        case "manager":
   41|      0|            return .manager
   42|      0|        case "ceo":
   43|      0|            return .ceo
   44|      0|        default:
   45|      0|            return nil
   46|      0|        }
   47|      0|    }
   48|       |    
   49|      0|    func stringValue() -> String? {
   50|      0|        switch self {
   51|      0|        case .ceo:
   52|      0|            return "ceo"
   53|      0|        case .manager:
   54|      0|            return "manager"
   55|      0|        }
   56|      0|    }
   57|       |}
   58|       |
   59|       |class EmployerForTesting: SundeedQLiter {
   60|       |    var type: Type?
   61|      0|    var mandatoryType: Type = .manager
   62|      0|    var arrayOfTypes: [Type] = []
   63|       |    var optionalArrayOfTypes: [Type]?
   64|       |    var optionalArrayOfOptionalTypes: [Type?]?
   65|      0|    var arrayOfOptionalTypes: [Type?] = []
   66|       |    var string: String = ""
   67|       |    var optionalString: String?
   68|      0|    var object: EmployeeForTesting = EmployeeForTesting(id: "EFGH-9012-IJKL-3456")
   69|       |    var optionalObject: EmployeeForTesting?
   70|       |    var integer: Int = 0
   71|       |    var optionalInteger: Int?
   72|       |    var double: Double = 0
   73|       |    var optionalDouble: Double?
   74|       |    var float: Float = 0
   75|       |    var optionalFloat: Float?
   76|       |    var bool: Bool = true
   77|       |    var optionalBool: Bool?
   78|      0|    var date: Date = Date()
   79|       |    var optionalDate: Date?
   80|      0|    var image: UIImage = UIImage(named: "image")!
   81|       |    var optionalImage: UIImage?
   82|      0|    var arrayOfStrings: [String] = []
   83|      0|    var arrayOfOptionalStrings: [String?] = []
   84|       |    var optionalArrayOfStrings: [String]?
   85|       |    var optionalArrayOfOptionalStrings: [String?]?
   86|      0|    var arrayOfObjects: [EmployeeForTesting] = []
   87|      0|    var arrayOfOptionalObjects: [EmployeeForTesting?] = []
   88|       |    var optionalArrayOfObjects: [EmployeeForTesting]?
   89|       |    var optionalArrayOfOptionalObjects: [EmployeeForTesting?]?
   90|      0|    var arrayOfIntegers: [Int] = []
   91|      0|    var arrayOfOptionalIntegers: [Int?] = []
   92|       |    var optionalArrayOfIntegers: [Int]?
   93|       |    var optionalArrayOfOptionalIntegers: [Int?]?
   94|      0|    var arrayOfDoubles: [Double] = []
   95|      0|    var arrayOfOptionalDoubles: [Double?] = []
   96|       |    var optionalArrayOfDoubles: [Double]?
   97|       |    var optionalArrayOfOptionalDoubles: [Double?]?
   98|      0|    var arrayOfFloats: [Float] = []
   99|      0|    var arrayOfOptionalFloats: [Float?] = []
  100|       |    var optionalArrayOfFloats: [Float]?
  101|       |    var optionalArrayOfOptionalFloats: [Float?]?
  102|      0|    var arrayOfBools: [Bool] = []
  103|      0|    var arrayOfOptionalBools: [Bool?] = []
  104|       |    var optionalArrayOfBools: [Bool]?
  105|       |    var optionalArrayOfOptionalBools: [Bool?]?
  106|      0|    var arrayOfDates: [Date] = []
  107|      0|    var arrayOfOptionalDates: [Date?] = []
  108|       |    var optionalArrayOfDates: [Date]?
  109|       |    var optionalArrayOfOptionalDates: [Date?]?
  110|      0|    var arrayOfImages: [UIImage] = []
  111|      0|    var arrayOfOptionalImages: [UIImage?] = []
  112|       |    var optionalArrayOfImages: [UIImage]?
  113|       |    var optionalArrayOfOptionalImages: [UIImage?]?
  114|       |    var nilString: String?
  115|       |    var nilObject: EmployeeForTesting?
  116|       |    var nilInteger: Int?
  117|       |    var nilDouble: Double?
  118|       |    var nilFloat: Float?
  119|       |    var nilBool: Bool?
  120|       |    var nilDate: Date?
  121|       |    var nilImage: UIImage?
  122|       |    var nilArrayOfStrings: [String]?
  123|       |    var nilArrayOfOptionalStrings: [String]?
  124|       |    var nilArrayOfObjects: [EmployeeForTesting]?
  125|       |    var nilArrayOfOptionalObjects: [EmployeeForTesting?]?
  126|       |    var nilArrayOfDoubles: [Double]?
  127|       |    var nilArrayOfOptionalDoubles: [Double?]?
  128|       |    var nilArrayOfFloats: [Float]?
  129|       |    var nilArrayOfOptionalFloats: [Float?]?
  130|       |    var nilArrayOfBools: [Bool]?
  131|       |    var nilArrayOfOptionalBools: [Bool?]?
  132|       |    var nilArrayOfDates: [Date]?
  133|       |    var nilArrayOfOptionalDates: [Date?]?
  134|       |    var nilArrayOfImages: [UIImage]?
  135|       |    var nilArrayOfOptionalImages: [UIImage?]?
  136|      0|    var emptyArrayOfStrings: [String] = []
  137|      0|    var emptyArrayOfOptionalStrings: [String] = []
  138|      0|    var emptyArrayOfObjects: [EmployeeForTesting] = []
  139|      0|    var emptyArrayOfOptionalObjects: [EmployeeForTesting?] = []
  140|      0|    var emptyArrayOfDoubles: [Double] = []
  141|      0|    var emptyArrayOfOptionalDoubles: [Double?] = []
  142|      0|    var emptyArrayOfFloats: [Float] = []
  143|      0|    var emptyArrayOfOptionalFloats: [Float?] = []
  144|      0|    var emptyArrayOfBools: [Float] = []
  145|      0|    var emptyArrayOfOptionalBools: [Float?] = []
  146|      0|    var emptyArrayOfDates: [Float] = []
  147|      0|    var emptyArrayOfOptionalDates: [Float?] = []
  148|      0|    var emptyArrayOfImages: [UIImage] = []
  149|      0|    var emptyArrayOfOptionalImages: [UIImage?] = []
  150|       |    
  151|      0|    required init() {}
  152|     28|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  153|     28|        type <~> (map["type"], TypeConverter())
  154|     28|        mandatoryType <~> (map["mandatoryType"], TypeConverter())
  155|     28|        arrayOfTypes <~> (map["arrayOfTypes"], TypeConverter())
  156|     28|        optionalArrayOfTypes <~> (map["optionalArrayOfTypes"], TypeConverter())
  157|     28|        optionalArrayOfOptionalTypes <~> (map["optionalArrayOfOptionalTypes"], TypeConverter())
  158|     28|        arrayOfOptionalTypes <~> (map["arrayOfOptionalTypes"], TypeConverter())
  159|     28|        string <~> map["string"]+
  160|     28|        optionalString <~> map["optionalString"]
  161|     28|        object <~> map["object"]
  162|     28|        optionalObject <~> map["optionalObject"]
  163|     28|        integer <~> map["integer"]>>
  164|     28|        optionalInteger <~> map["optionalInteger"]
  165|     28|        double <~> map["double"]
  166|     28|        optionalDouble <~> map["optionalDouble"]
  167|     28|        float <~> map["float"]
  168|     28|        optionalFloat <~> map["optionalFloat"]
  169|     28|        bool <~> map["bool"]
  170|     28|        optionalBool <~> map["optionalBool"]
  171|     28|        date <~> map["date"]
  172|     28|        optionalDate <~> map["optionalDate"]
  173|     28|        image <~> map["image"]
  174|     28|        optionalImage <~> map["optionalImage"]
  175|     28|        arrayOfStrings <~> map["arrayOfStrings"]
  176|     28|        arrayOfOptionalStrings <~> map["arrayOfOptionalStrings"]
  177|     28|        optionalArrayOfStrings <~> map["optionalArrayOfStrings"]
  178|     28|        optionalArrayOfOptionalStrings <~> map["optionalArrayOfOptionalStrings"]
  179|     28|        arrayOfObjects <~> map["arrayOfObjects"]
  180|     28|        arrayOfOptionalObjects <~> map["arrayOfOptionalObjects"]
  181|     28|        optionalArrayOfObjects <~> map["optionalArrayOfObjects"]
  182|     28|        optionalArrayOfOptionalObjects <~> map["optionalArrayOfOptionalObjects"]
  183|     28|        arrayOfIntegers <~> map["arrayOfIntegers"]
  184|     28|        arrayOfOptionalIntegers <~> map["arrayOfOptionalIntegers"]
  185|     28|        optionalArrayOfIntegers <~> map["optionalArrayOfIntegers"]
  186|     28|        optionalArrayOfOptionalIntegers <~> map["optionalArrayOfOptionalIntegers"]
  187|     28|        arrayOfDoubles <~> map["arrayOfDoubles"]
  188|     28|        arrayOfOptionalDoubles <~> map["arrayOfOptionalDoubles"]
  189|     28|        optionalArrayOfDoubles <~> map["optionalArrayOfDoubles"]
  190|     28|        optionalArrayOfOptionalDoubles <~> map["optionalArrayOfOptionalDoubles"]
  191|     28|        arrayOfFloats <~> map["arrayOfFloats"]
  192|     28|        arrayOfOptionalFloats <~> map["arrayOfOptionalFloats"]
  193|     28|        optionalArrayOfFloats <~> map["optionalArrayOfFloats"]
  194|     28|        optionalArrayOfOptionalFloats <~> map["optionalArrayOfOptionalFloats"]
  195|     28|        arrayOfBools <~> map["arrayOfBools"]
  196|     28|        arrayOfOptionalBools <~> map["arrayOfOptionalBools"]
  197|     28|        optionalArrayOfBools <~> map["optionalArrayOfBools"]
  198|     28|        optionalArrayOfOptionalBools <~> map["optionalArrayOfOptionalBools"]
  199|     28|        arrayOfDates <~> map["arrayOfDates"]
  200|     28|        arrayOfOptionalDates <~> map["arrayOfOptionalDates"]
  201|     28|        optionalArrayOfDates <~> map["optionalArrayOfDates"]
  202|     28|        optionalArrayOfOptionalDates <~> map["optionalArrayOfOptionalDates"]
  203|     28|        arrayOfImages <~> map["arrayOfImages"]
  204|     28|        arrayOfOptionalImages <~> map["arrayOfOptionalImages"]
  205|     28|        optionalArrayOfImages <~> map["optionalArrayOfImages"]
  206|     28|        optionalArrayOfOptionalImages <~> map["optionalArrayOfOptionalImages"]
  207|     28|        nilString <~> map["nilString"]
  208|     28|        nilObject <~> map["nilObject"]
  209|     28|        nilInteger <~> map["nilInteger"]
  210|     28|        nilDouble <~> map["nilDouble"]
  211|     28|        nilFloat <~> map["nilFloat"]
  212|     28|        nilBool <~> map["nilBool"]
  213|     28|        nilDate <~> map["nilDate"]
  214|     28|        nilImage <~> map["nilImage"]
  215|     28|        nilArrayOfStrings <~> map["nilArrayOfStrings"]
  216|     28|        nilArrayOfOptionalStrings <~> map["nilArrayOfOptionalStrings"]
  217|     28|        nilArrayOfObjects <~> map["nilArrayOfObjects"]
  218|     28|        nilArrayOfOptionalObjects <~> map["nilArrayOfOptionalObjects"]
  219|     28|        nilArrayOfDoubles <~> map["nilArrayOfDoubles"]
  220|     28|        nilArrayOfOptionalDoubles <~> map["nilArrayOfOptionalDoubles"]
  221|     28|        nilArrayOfFloats <~> map["nilArrayOfFloats"]
  222|     28|        nilArrayOfOptionalFloats <~> map["nilArrayOfOptionalFloats"]
  223|     28|        nilArrayOfBools <~> map["nilArrayOfBools"]
  224|     28|        nilArrayOfOptionalBools <~> map["nilArrayOfOptionalBools"]
  225|     28|        nilArrayOfDates <~> map["nilArrayOfDates"]
  226|     28|        nilArrayOfOptionalDates <~> map["nilArrayOfOptionalDates"]
  227|     28|        nilArrayOfImages <~> map["nilArrayOfImages"]
  228|     28|        nilArrayOfOptionalImages <~> map["nilArrayOfOptionalImages"]
  229|     28|        emptyArrayOfStrings <~> map["emptyArrayOfStrings"]
  230|     28|        emptyArrayOfOptionalStrings <~> map["emptyArrayOfOptionalStrings"]
  231|     28|        emptyArrayOfObjects <~> map["emptyArrayOfObjects"]
  232|     28|        emptyArrayOfOptionalObjects <~> map["emptyArrayOfOptionalObjects"]
  233|     28|        emptyArrayOfDoubles <~> map["emptyArrayOfDoubles"]
  234|     28|        emptyArrayOfOptionalDoubles <~> map["emptyArrayOfOptionalDoubles"]
  235|     28|        emptyArrayOfFloats <~> map["emptyArrayOfFloats"]
  236|     28|        emptyArrayOfOptionalFloats <~> map["emptyArrayOfOptionalFloats"]
  237|     28|        emptyArrayOfBools <~> map["emptyArrayOfBools"]
  238|     28|        emptyArrayOfOptionalBools <~> map["emptyArrayOfOptionalBools"]
  239|     28|        emptyArrayOfDates <~> map["emptyArrayOfDates"]
  240|     28|        emptyArrayOfOptionalDates <~> map["emptyArrayOfOptionalDates"]
  241|     28|        emptyArrayOfImages <~> map["emptyArrayOfImages"]
  242|     28|        emptyArrayOfOptionalImages <~> map["emptyArrayOfOptionalImages"]
  243|     28|    }
  244|       |    
  245|       |    
  246|     16|    func fillData() {
  247|     16|        var employees: [EmployeeForTesting] = []
  248|     16|        
  249|     96|        for i in 0...5 {
  250|     96|            let employee = EmployeeForTesting()
  251|     96|            employee.id = "EMP\(i)"
  252|     96|            employee.firstName = "Nour\(i)"
  253|     96|            employees.append(employee)
  254|     96|        }
  255|     16|        type = .manager
  256|     16|        mandatoryType = .ceo
  257|     16|        arrayOfTypes = [.manager, .ceo]
  258|     16|        optionalArrayOfTypes = [.manager, .ceo]
  259|     16|        optionalArrayOfOptionalTypes = [.manager, .ceo]
  260|     16|        arrayOfOptionalTypes = [.manager, .ceo]
  261|     16|        string = "string"
  262|     16|        optionalString = "optionalString"
  263|     16|        object = employees[0]
  264|     16|        optionalObject = employees[1]
  265|     16|        integer = 1
  266|     16|        optionalInteger = 2
  267|     16|        double = 3
  268|     16|        optionalDouble = 4
  269|     16|        float = 5
  270|     16|        optionalFloat = 6
  271|     16|        bool = true
  272|     16|        optionalBool = true
  273|     16|        date = Date()
  274|     16|        optionalDate = Date()
  275|     16|        image = UIImage(named: "image")!
  276|     16|        optionalImage = UIImage(named: "image")
  277|     16|        arrayOfStrings = ["string1", "string2"]
  278|     16|        arrayOfOptionalStrings = ["string3", nil]
  279|     16|        optionalArrayOfStrings = ["string4", "string6"]
  280|     16|        optionalArrayOfOptionalStrings = ["string7", nil]
  281|     16|        arrayOfObjects = [employees[2]]
  282|     16|        arrayOfOptionalObjects = [employees[3], nil]
  283|     16|        optionalArrayOfObjects = [employees[4]]
  284|     16|        optionalArrayOfOptionalObjects = [employees[5], nil]
  285|     16|        arrayOfIntegers = [1, 2]
  286|     16|        arrayOfOptionalIntegers = [2, nil]
  287|     16|        optionalArrayOfIntegers = [1, 2]
  288|     16|        optionalArrayOfOptionalIntegers = [2, nil]
  289|     16|        arrayOfDoubles = [3, 4]
  290|     16|        arrayOfOptionalDoubles = [4, nil]
  291|     16|        optionalArrayOfDoubles = [3, 4]
  292|     16|        optionalArrayOfOptionalDoubles = [4, nil]
  293|     16|        arrayOfFloats = [5, 6]
  294|     16|        arrayOfOptionalFloats = [6, nil]
  295|     16|        optionalArrayOfFloats = [5, 6]
  296|     16|        optionalArrayOfOptionalFloats = [6, nil]
  297|     16|        arrayOfBools = [true, false]
  298|     16|        arrayOfOptionalBools = [true, nil]
  299|     16|        optionalArrayOfBools = [true, false]
  300|     16|        optionalArrayOfOptionalBools = [true, nil]
  301|     16|        arrayOfDates = [Date(), Date()]
  302|     16|        arrayOfOptionalDates = [Date(), nil]
  303|     16|        optionalArrayOfDates = [Date(), Date()]
  304|     16|        optionalArrayOfOptionalDates = [Date(), nil]
  305|     16|        arrayOfImages = [UIImage(named: "image")!, UIImage(named: "image")!]
  306|     16|        arrayOfOptionalImages = [UIImage(named: "image"), nil]
  307|     16|        optionalArrayOfImages = [UIImage(named: "image")!, UIImage(named: "image")!]
  308|     16|        optionalArrayOfOptionalImages = [UIImage(named: "image"), nil]
  309|     16|    }
  310|       |    
  311|      0|    func printEmployer() {
  312|      0|        let mirror = Mirror(reflecting: self)
  313|      0|        for (_, value) in mirror.children.enumerated() {
  314|      0|            print("\(value.label ?? "\"\""): \(String(describing: value.value))")
  315|      0|        }
  316|      0|    }
  317|       |}
  318|       |
  319|       |class EmployerWithNoPrimaryForTesting: SundeedQLiter {
  320|       |    var type: Type?
  321|       |    var string: String = ""
  322|       |    var optionalString: String?
  323|      0|    var object: EmployeeForTesting = EmployeeForTesting(id: "EFGH-9012-IJKL-3456")
  324|       |    var optionalObject: EmployeeForTesting?
  325|       |    var integer: Int = 0
  326|       |    var optionalInteger: Int?
  327|       |    var double: Double = 0
  328|       |    var optionalDouble: Double?
  329|       |    var float: Float = 0
  330|       |    var optionalFloat: Float?
  331|       |    var bool: Bool = true
  332|       |    var optionalBool: Bool?
  333|      0|    var date: Date = Date()
  334|       |    var optionalDate: Date?
  335|      0|    var image: UIImage = UIImage(named: "image")!
  336|       |    var optionalImage: UIImage?
  337|      0|    var arrayOfStrings: [String] = []
  338|      0|    var arrayOfOptionalStrings: [String?] = []
  339|       |    var optionalArrayOfStrings: [String]?
  340|       |    var optionalArrayOfOptionalStrings: [String?]?
  341|      0|    var arrayOfObjects: [EmployeeForTesting] = []
  342|      0|    var arrayOfOptionalObjects: [EmployeeForTesting?] = []
  343|       |    var optionalArrayOfObjects: [EmployeeForTesting]?
  344|       |    var optionalArrayOfOptionalObjects: [EmployeeForTesting?]?
  345|      0|    var arrayOfIntegers: [Int] = []
  346|      0|    var arrayOfOptionalIntegers: [Int?] = []
  347|       |    var optionalArrayOfIntegers: [Int]?
  348|       |    var optionalArrayOfOptionalIntegers: [Int?]?
  349|      0|    var arrayOfDoubles: [Double] = []
  350|      0|    var arrayOfOptionalDoubles: [Double?] = []
  351|       |    var optionalArrayOfDoubles: [Double]?
  352|       |    var optionalArrayOfOptionalDoubles: [Double?]?
  353|      0|    var arrayOfFloats: [Float] = []
  354|      0|    var arrayOfOptionalFloats: [Float?] = []
  355|       |    var optionalArrayOfFloats: [Float]?
  356|       |    var optionalArrayOfOptionalFloats: [Float?]?
  357|      0|    var arrayOfBools: [Bool] = []
  358|      0|    var arrayOfOptionalBools: [Bool?] = []
  359|       |    var optionalArrayOfBools: [Bool]?
  360|       |    var optionalArrayOfOptionalBools: [Bool?]?
  361|      0|    var arrayOfDates: [Date] = []
  362|      0|    var arrayOfOptionalDates: [Date?] = []
  363|       |    var optionalArrayOfDates: [Date]?
  364|       |    var optionalArrayOfOptionalDates: [Date?]?
  365|      0|    var arrayOfImages: [UIImage] = []
  366|      0|    var arrayOfOptionalImages: [UIImage?] = []
  367|       |    var optionalArrayOfImages: [UIImage]?
  368|       |    var optionalArrayOfOptionalImages: [UIImage?]?
  369|       |    var nilString: String?
  370|       |    var nilObject: EmployeeForTesting?
  371|       |    var nilInteger: Int?
  372|       |    var nilDouble: Double?
  373|       |    var nilFloat: Float?
  374|       |    var nilBool: Bool?
  375|       |    var nilDate: Date?
  376|       |    var nilImage: UIImage?
  377|       |    var nilArrayOfStrings: [String]?
  378|       |    var nilArrayOfOptionalStrings: [String]?
  379|       |    var nilArrayOfObjects: [EmployeeForTesting]?
  380|       |    var nilArrayOfOptionalObjects: [EmployeeForTesting?]?
  381|       |    var nilArrayOfDoubles: [Double]?
  382|       |    var nilArrayOfOptionalDoubles: [Double?]?
  383|       |    var nilArrayOfFloats: [Float]?
  384|       |    var nilArrayOfOptionalFloats: [Float?]?
  385|       |    var nilArrayOfBools: [Bool]?
  386|       |    var nilArrayOfOptionalBools: [Bool?]?
  387|       |    var nilArrayOfDates: [Date]?
  388|       |    var nilArrayOfOptionalDates: [Date?]?
  389|       |    var nilArrayOfImages: [UIImage]?
  390|       |    var nilArrayOfOptionalImages: [UIImage?]?
  391|      0|    var emptyArrayOfStrings: [String] = []
  392|      0|    var emptyArrayOfOptionalStrings: [String] = []
  393|      0|    var emptyArrayOfObjects: [EmployeeForTesting] = []
  394|      0|    var emptyArrayOfOptionalObjects: [EmployeeForTesting?] = []
  395|      0|    var emptyArrayOfDoubles: [Double] = []
  396|      0|    var emptyArrayOfOptionalDoubles: [Double?] = []
  397|      0|    var emptyArrayOfFloats: [Float] = []
  398|      0|    var emptyArrayOfOptionalFloats: [Float?] = []
  399|      0|    var emptyArrayOfBools: [Float] = []
  400|      0|    var emptyArrayOfOptionalBools: [Float?] = []
  401|      0|    var emptyArrayOfDates: [Float] = []
  402|      0|    var emptyArrayOfOptionalDates: [Float?] = []
  403|      0|    var emptyArrayOfImages: [UIImage] = []
  404|      0|    var emptyArrayOfOptionalImages: [UIImage?] = []
  405|       |    
  406|      0|    required init() {}
  407|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  408|      0|        type <~> (map["type"], TypeConverter())
  409|      0|        string <~> map["string"]
  410|      0|        optionalString <~> map["optionalString"]
  411|      0|        object <~> map["object"]
  412|      0|        optionalObject <~> map["optionalObject"]
  413|      0|        integer <~> map["integer"]<<
  414|      0|        optionalInteger <~> map["optionalInteger"]
  415|      0|        double <~> map["double"]
  416|      0|        optionalDouble <~> map["optionalDouble"]
  417|      0|        float <~> map["float"]
  418|      0|        optionalFloat <~> map["optionalFloat"]
  419|      0|        bool <~> map["bool"]
  420|      0|        optionalBool <~> map["optionalBool"]
  421|      0|        date <~> map["date"]
  422|      0|        optionalDate <~> map["optionalDate"]
  423|      0|        image <~> map["image"]
  424|      0|        optionalImage <~> map["optionalImage"]
  425|      0|        arrayOfStrings <~> map["arrayOfStrings"]
  426|      0|        arrayOfOptionalStrings <~> map["arrayOfOptionalStrings"]
  427|      0|        optionalArrayOfStrings <~> map["optionalArrayOfStrings"]
  428|      0|        optionalArrayOfOptionalStrings <~> map["optionalArrayOfOptionalStrings"]
  429|      0|        arrayOfObjects <~> map["arrayOfObjects"]
  430|      0|        arrayOfOptionalObjects <~> map["arrayOfOptionalObjects"]
  431|      0|        optionalArrayOfObjects <~> map["optionalArrayOfObjects"]
  432|      0|        optionalArrayOfOptionalObjects <~> map["optionalArrayOfOptionalObjects"]
  433|      0|        arrayOfIntegers <~> map["arrayOfIntegers"]
  434|      0|        arrayOfOptionalIntegers <~> map["arrayOfOptionalIntegers"]
  435|      0|        optionalArrayOfIntegers <~> map["optionalArrayOfIntegers"]
  436|      0|        optionalArrayOfOptionalIntegers <~> map["optionalArrayOfOptionalIntegers"]
  437|      0|        arrayOfDoubles <~> map["arrayOfDoubles"]
  438|      0|        arrayOfOptionalDoubles <~> map["arrayOfOptionalDoubles"]
  439|      0|        optionalArrayOfDoubles <~> map["optionalArrayOfDoubles"]
  440|      0|        optionalArrayOfOptionalDoubles <~> map["optionalArrayOfOptionalDoubles"]
  441|      0|        arrayOfFloats <~> map["arrayOfFloats"]
  442|      0|        arrayOfOptionalFloats <~> map["arrayOfOptionalFloats"]
  443|      0|        optionalArrayOfFloats <~> map["optionalArrayOfFloats"]
  444|      0|        optionalArrayOfOptionalFloats <~> map["optionalArrayOfOptionalFloats"]
  445|      0|        arrayOfBools <~> map["arrayOfBools"]
  446|      0|        arrayOfOptionalBools <~> map["arrayOfOptionalBools"]
  447|      0|        optionalArrayOfBools <~> map["optionalArrayOfBools"]
  448|      0|        optionalArrayOfOptionalBools <~> map["optionalArrayOfOptionalBools"]
  449|      0|        arrayOfDates <~> map["arrayOfDates"]
  450|      0|        arrayOfOptionalDates <~> map["arrayOfOptionalDates"]
  451|      0|        optionalArrayOfDates <~> map["optionalArrayOfDates"]
  452|      0|        optionalArrayOfOptionalDates <~> map["optionalArrayOfOptionalDates"]
  453|      0|        arrayOfImages <~> map["arrayOfImages"]
  454|      0|        arrayOfOptionalImages <~> map["arrayOfOptionalImages"]
  455|      0|        optionalArrayOfImages <~> map["optionalArrayOfImages"]
  456|      0|        optionalArrayOfOptionalImages <~> map["optionalArrayOfOptionalImages"]
  457|      0|        nilString <~> map["nilString"]
  458|      0|        nilObject <~> map["nilObject"]
  459|      0|        nilInteger <~> map["nilInteger"]
  460|      0|        nilDouble <~> map["nilDouble"]
  461|      0|        nilFloat <~> map["nilFloat"]
  462|      0|        nilBool <~> map["nilBool"]
  463|      0|        nilDate <~> map["nilDate"]
  464|      0|        nilImage <~> map["nilImage"]
  465|      0|        nilArrayOfStrings <~> map["nilArrayOfStrings"]
  466|      0|        nilArrayOfOptionalStrings <~> map["nilArrayOfOptionalStrings"]
  467|      0|        nilArrayOfObjects <~> map["nilArrayOfObjects"]
  468|      0|        nilArrayOfOptionalObjects <~> map["nilArrayOfOptionalObjects"]
  469|      0|        nilArrayOfDoubles <~> map["nilArrayOfDoubles"]
  470|      0|        nilArrayOfOptionalDoubles <~> map["nilArrayOfOptionalDoubles"]
  471|      0|        nilArrayOfFloats <~> map["nilArrayOfFloats"]
  472|      0|        nilArrayOfOptionalFloats <~> map["nilArrayOfOptionalFloats"]
  473|      0|        nilArrayOfBools <~> map["nilArrayOfBools"]
  474|      0|        nilArrayOfOptionalBools <~> map["nilArrayOfOptionalBools"]
  475|      0|        nilArrayOfDates <~> map["nilArrayOfDates"]
  476|      0|        nilArrayOfOptionalDates <~> map["nilArrayOfOptionalDates"]
  477|      0|        nilArrayOfImages <~> map["nilArrayOfImages"]
  478|      0|        nilArrayOfOptionalImages <~> map["nilArrayOfOptionalImages"]
  479|      0|        emptyArrayOfStrings <~> map["emptyArrayOfStrings"]
  480|      0|        emptyArrayOfOptionalStrings <~> map["emptyArrayOfOptionalStrings"]
  481|      0|        emptyArrayOfObjects <~> map["emptyArrayOfObjects"]
  482|      0|        emptyArrayOfOptionalObjects <~> map["emptyArrayOfOptionalObjects"]
  483|      0|        emptyArrayOfDoubles <~> map["emptyArrayOfDoubles"]
  484|      0|        emptyArrayOfOptionalDoubles <~> map["emptyArrayOfOptionalDoubles"]
  485|      0|        emptyArrayOfFloats <~> map["emptyArrayOfFloats"]
  486|      0|        emptyArrayOfOptionalFloats <~> map["emptyArrayOfOptionalFloats"]
  487|      0|        emptyArrayOfBools <~> map["emptyArrayOfBools"]
  488|      0|        emptyArrayOfOptionalBools <~> map["emptyArrayOfOptionalBools"]
  489|      0|        emptyArrayOfDates <~> map["emptyArrayOfDates"]
  490|      0|        emptyArrayOfOptionalDates <~> map["emptyArrayOfOptionalDates"]
  491|      0|        emptyArrayOfImages <~> map["emptyArrayOfImages"]
  492|      0|        emptyArrayOfOptionalImages <~> map["emptyArrayOfOptionalImages"]
  493|      0|    }
  494|       |    
  495|       |    
  496|      0|    func fillData() {
  497|      0|        var employees: [EmployeeForTesting] = []
  498|      0|        
  499|      0|        for i in 0...5 {
  500|      0|            let employee = EmployeeForTesting()
  501|      0|            employee.id = "EMP\(i)"
  502|      0|            employee.firstName = "Nour\(i)"
  503|      0|            employees.append(employee)
  504|      0|        }
  505|      0|        type = .manager
  506|      0|        string = "string"
  507|      0|        optionalString = "optionalString"
  508|      0|        object = employees[0]
  509|      0|        optionalObject = employees[1]
  510|      0|        integer = 1
  511|      0|        optionalInteger = 2
  512|      0|        double = 3
  513|      0|        optionalDouble = 4
  514|      0|        float = 5
  515|      0|        optionalFloat = 6
  516|      0|        bool = true
  517|      0|        optionalBool = true
  518|      0|        date = Date()
  519|      0|        optionalDate = Date()
  520|      0|        image = UIImage(named: "image")!
  521|      0|        optionalImage = UIImage(named: "image")
  522|      0|        arrayOfStrings = ["string1", "string2"]
  523|      0|        arrayOfOptionalStrings = ["string3", nil]
  524|      0|        optionalArrayOfStrings = ["string4", "string6"]
  525|      0|        optionalArrayOfOptionalStrings = ["string7", nil]
  526|      0|        arrayOfObjects = [employees[2]]
  527|      0|        arrayOfOptionalObjects = [employees[3], nil]
  528|      0|        optionalArrayOfObjects = [employees[4]]
  529|      0|        optionalArrayOfOptionalObjects = [employees[5], nil]
  530|      0|        arrayOfIntegers = [1, 2]
  531|      0|        arrayOfOptionalIntegers = [2, nil]
  532|      0|        optionalArrayOfIntegers = [1, 2]
  533|      0|        optionalArrayOfOptionalIntegers = [2, nil]
  534|      0|        arrayOfDoubles = [3, 4]
  535|      0|        arrayOfOptionalDoubles = [4, nil]
  536|      0|        optionalArrayOfDoubles = [3, 4]
  537|      0|        optionalArrayOfOptionalDoubles = [4, nil]
  538|      0|        arrayOfFloats = [5, 6]
  539|      0|        arrayOfOptionalFloats = [6, nil]
  540|      0|        optionalArrayOfFloats = [5, 6]
  541|      0|        optionalArrayOfOptionalFloats = [6, nil]
  542|      0|        arrayOfBools = [true, false]
  543|      0|        arrayOfOptionalBools = [true, nil]
  544|      0|        optionalArrayOfBools = [true, false]
  545|      0|        optionalArrayOfOptionalBools = [true, nil]
  546|      0|        arrayOfDates = [Date(), Date()]
  547|      0|        arrayOfOptionalDates = [Date(), nil]
  548|      0|        optionalArrayOfDates = [Date(), Date()]
  549|      0|        optionalArrayOfOptionalDates = [Date(), nil]
  550|      0|        arrayOfImages = [UIImage(named: "image")!, UIImage(named: "image")!]
  551|      0|        arrayOfOptionalImages = [UIImage(named: "image"), nil]
  552|      0|        optionalArrayOfImages = [UIImage(named: "image")!, UIImage(named: "image")!]
  553|      0|        optionalArrayOfOptionalImages = [UIImage(named: "image"), nil]
  554|      0|    }
  555|       |    
  556|      0|    func printEmployer() {
  557|      0|        let mirror = Mirror(reflecting: self)
  558|      0|        for (_, value) in mirror.children.enumerated() {
  559|      0|            print("\(value.label ?? "\"\""): \(String(describing: value.value))")
  560|      0|        }
  561|      0|    }
  562|       |}
  563|       |
  564|       |
  565|       |class MandatoryClass: SundeedQLiter {
  566|       |    var id: String = "qwe"
  567|       |    var firstName: String?
  568|      0|    required init() {}
  569|       |    
  570|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  571|      0|        id <~> map["id"]+
  572|      0|        firstName <*> map["firstName"]
  573|      0|    }
  574|       |}
  575|       |
  576|       |
  577|       |class ClassContainingAMandatoryOptionalClassInArray: SundeedQLiter {
  578|       |    var id: String = "ID"
  579|      0|    var mandatoryClasses: [MandatoryClass?] = []
  580|      0|    required init() {}
  581|       |    
  582|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  583|      0|        id <~> map["id"]+
  584|      0|        mandatoryClasses <~> map["mandatoryClasses"]
  585|      0|    }
  586|       |}
  587|       |
  588|       |class ClassContainingAMandatoryOptionalClassInOptionalArray: SundeedQLiter {
  589|       |    var id: String = "ID"
  590|       |    var mandatoryClasses: [MandatoryClass?]?
  591|      0|    required init() {}
  592|       |    
  593|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  594|      0|        id <~> map["id"]+
  595|      0|        mandatoryClasses <~> map["mandatoryClasses"]
  596|      0|    }
  597|       |}
  598|       |
  599|       |class ClassContainingAMandatoryClassInArray: SundeedQLiter {
  600|       |    var id: String = "ID"
  601|      0|    var mandatoryClasses: [MandatoryClass] = []
  602|      0|    required init() {}
  603|       |    
  604|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  605|      0|        id <~> map["id"]+
  606|      0|        mandatoryClasses <~> map["mandatoryClasses"]
  607|      0|    }
  608|       |}
  609|       |
  610|       |class ClassContainingAMandatoryClassInOptionalArray: SundeedQLiter {
  611|       |    var id: String = "ID"
  612|       |    var mandatoryClasses: [MandatoryClass]?
  613|      0|    required init() {}
  614|       |    
  615|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  616|      0|        id <~> map["id"]+
  617|      0|        mandatoryClasses <~> map["mandatoryClasses"]
  618|      0|    }
  619|       |}
  620|       |
  621|       |class ClassContainingAMandatoryOptionalClass: SundeedQLiter {
  622|       |    var id: String = "ID"
  623|       |    var mandatoryClasses: MandatoryClass?
  624|      0|    required init() {}
  625|       |    
  626|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  627|      0|        id <~> map["id"]+
  628|      0|        mandatoryClasses <~> map["mandatoryClasses"]
  629|      0|    }
  630|       |}
  631|       |
  632|       |class ClassContainingAMandatoryClass: SundeedQLiter {
  633|       |    var id: String = "ID"
  634|      0|    var mandatoryClasses: MandatoryClass = MandatoryClass()
  635|      0|    required init() {}
  636|       |    
  637|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  638|      0|        id <~> map["id"]+
  639|      0|        mandatoryClasses <~> map["mandatoryClasses"]
  640|      0|    }
  641|       |}
  642|       |
  643|       |
  644|       |
  645|       |class ClassContainingParameterIndex: SundeedQLiter {
  646|       |    var index: String?
  647|      0|    required init() {}
  648|       |    
  649|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  650|      0|        index <~> map["index"]+
  651|      0|    }
  652|       |}
  653|       |
  654|       |
  655|       |
  656|       |class NonSundeedQLiterClass {
  657|       |    var firstName: String?
  658|       |}

/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/ErrorCodes/SundeedQLiteErrorTests.swift:
    1|       |//
    2|       |//  SundeedQLiteErrorTests.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 10/8/19.
    6|       |//  Copyright Â© 2019 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import SundeedQLiteLibrary
   11|       |
   12|       |class SundeedQLiteErrorTests: XCTestCase {
   13|       |    var employer: EmployerForTesting?
   14|       |    var error: SundeedQLiteError?
   15|       |
   16|      6|    override func setUp() {
   17|      6|        employer = EmployerForTesting()
   18|      6|        employer?.fillData()
   19|      6|    }
   20|       |    
   21|      6|    override func tearDown() {
   22|      6|        SundeedQLite.deleteDatabase()
   23|      6|        error = nil
   24|      6|        employer = nil
   25|      6|    }
   26|       |
   27|      1|    func testPrimaryKeyError() {
   28|      1|        guard let employer = employer else {
   29|      0|            XCTFail("Employer nil")
   30|      0|            return
   31|      1|        }
   32|      1|        error = .primaryKeyError(tableName: employer.getTableName())
   33|      1|        let errorString = "SundeedQLiteError with class \(employer.getTableName()): \n No Primary Key \n - To add a primary key add a '+' sign in the mapping function in the class after the designated primary map \n  e.g: self.id = map[\"ID\"]+"
   34|      1|        XCTAssertEqual(error?.description, errorString)
   35|      1|    }
   36|       |    
   37|      1|    func testUnsupportedTypeError() {
   38|      1|        guard let employer = employer else {
   39|      0|            XCTFail("Employer nil")
   40|      0|            return
   41|      1|        }
   42|      1|        error = .unsupportedType(tableName: employer.getTableName(), attribute: "Test")
   43|      1|        let errorString = "SundeedQLiteError with class \(employer.getTableName()): \n Unsupported Type Test \n - Try to change the type of this attribute, or send us a suggestion so we can add it"
   44|      1|        XCTAssertEqual(error?.description, errorString)
   45|      1|    }
   46|       |    
   47|      1|    func testNoColumnWithThisNameError() {
   48|      1|        guard let employer = employer else {
   49|      0|            XCTFail("Employer nil")
   50|      0|            return
   51|      1|        }
   52|      1|        error = .noColumnWithThisName(tableName: employer.getTableName(), columnName: "Test")
   53|      1|        let errorString = "SundeedQLiteError with class \(employer.getTableName()): \n No Column With Title Test \n - Try to change the column name and try again"
   54|      1|        XCTAssertEqual(error?.description, errorString)
   55|      1|    }
   56|       |    
   57|      1|    func testCantUseNameIndexError() {
   58|      1|        guard let employer = employer else {
   59|      0|            XCTFail("Employer nil")
   60|      0|            return
   61|      1|        }
   62|      1|        error = .cantUseNameIndex(tableName: employer.getTableName())
   63|      1|        let errorString = "SundeedQLiteError with class \(employer.getTableName()): \n Unsupported column name \"index\" because it is reserved \n - Try to change it and try again"
   64|      1|        XCTAssertEqual(error?.description, errorString)
   65|      1|    }
   66|       |    
   67|      1|    func testNoChangesMadeError() {
   68|      1|        guard let employer = employer else {
   69|      0|            XCTFail("Employer nil")
   70|      0|            return
   71|      1|        }
   72|      1|        error = .noChangesMade(tableName: employer.getTableName())
   73|      1|        let errorString = "SundeedQLiteError with class \(employer.getTableName()): \n Trying to perform global update statement with no changes \n - Try to add some changes and try again"
   74|      1|        XCTAssertEqual(error?.description, errorString)
   75|      1|    }
   76|       |    
   77|      0|    func testErrorInNoObjectError() {
   78|      0|        error = .noObjectPassed
   79|      0|        let errorString = "SundeedQLiteError no object passed to handle"
   80|      0|        XCTAssertEqual(error?.description, errorString)
   81|      0|    }
   82|       |    
   83|      1|    func testErrorInConnectionError() {
   84|      1|        error = .errorInConnection
   85|      1|        let errorString = "SundeedQLiteError with Connection : \n Unable to create a connection to the local database \n Make sure that you have access and permissions to device's files"
   86|      1|        XCTAssertEqual(error?.description, errorString)
   87|      1|    }
   88|       |}

/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/Listeners/Listeners.swift:
    1|       |//
    2|       |//  Listeners.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 5/19/20.
    6|       |//  Copyright Â© 2020 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import SundeedQLiteLibrary
   11|       |
   12|       |class Listeners: XCTestCase {
   13|      0|    var employer: EmployerForTesting? = EmployerForTesting()
   14|       |    
   15|      0|    override func setUp() {
   16|      0|        EmployerForTesting.delete()
   17|      0|        EmployeeForTesting.delete()
   18|      0|        employer?.fillData()
   19|      0|    }
   20|       |    
   21|      0|    override class func tearDown() {
   22|      0|        SundeedQLite.deleteDatabase()
   23|      0|        UserDefaults.standard.removeObject(forKey: Sundeed.shared.shouldCopyDatabaseToFilePathKey)
   24|      0|    }
   25|       |    
   26|      0|    func testSpecificOnAllEventsListener() {
   27|      0|        let expectation = XCTestExpectation(description: "Deleted Retrieve Employer")
   28|      0|        let listener = self.employer?.onAllEvents({ (object) in
   29|      0|            XCTAssertEqual(object.string, "string")
   30|      0|            expectation.fulfill()
   31|      0|        })
   32|      0|        employer?.save()
   33|      0|        wait(for: [expectation], timeout: 0.1)
   34|      0|        listener?.stop()
   35|      0|    }
   36|       |    
   37|      0|    func testSpecificOnSaveListener() {
   38|      0|        let expectation = XCTestExpectation(description: "Deleted Retrieve Employer")
   39|      0|        let listener = self.employer?.onSaveEvents({ (object) in
   40|      0|            XCTAssertEqual(object.string, "string")
   41|      0|            expectation.fulfill()
   42|      0|        })
   43|      0|        employer?.save()
   44|      0|        wait(for: [expectation], timeout: 0.1)
   45|      0|        listener?.stop()
   46|      0|    }
   47|       |    
   48|      0|    func testSpecificOnUpdateListener() {
   49|      0|        let expectation = XCTestExpectation(description: "Deleted Retrieve Employer")
   50|      0|        let listener = self.employer?.onUpdateEvents({ (object) in
   51|      0|            XCTAssertEqual(object.string, "test")
   52|      0|            expectation.fulfill()
   53|      0|        })
   54|      0|        employer?.string = "test"
   55|      0|        try? employer?.update(columns: SundeedColumn("string"))
   56|      0|        wait(for: [expectation], timeout: 1)
   57|      0|        listener?.stop()
   58|      0|    }
   59|       |    
   60|      0|    func testSpecificOnRetrieveListener() {
   61|      0|        employer?.save()
   62|      0|        let expectation = XCTestExpectation(description: "Deleted Retrieve Employer")
   63|      0|        let listener = self.employer?.onRetrieveEvents({ (object) in
   64|      0|            XCTAssertEqual(object.string, "string")
   65|      0|            expectation.fulfill()
   66|      0|        })
   67|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   68|      0|            EmployerForTesting.retrieve(completion: { _ in })
   69|      0|        }
   70|      0|        wait(for: [expectation], timeout: 1)
   71|      0|        listener?.stop()
   72|      0|    }
   73|       |    
   74|      0|    func testSpecificOnDeleteListener() {
   75|      0|        let expectation = XCTestExpectation(description: "Deleted Retrieve Employer")
   76|      0|        let listener = self.employer?.onDeleteEvents({ (object) in
   77|      0|            XCTAssertEqual(object.string, "string")
   78|      0|            expectation.fulfill()
   79|      0|        })
   80|      0|        let _ = try? employer?.delete()
   81|      0|        wait(for: [expectation], timeout: 0.1)
   82|      0|        listener?.stop()
   83|      0|    }
   84|       |    
   85|       |    
   86|      0|    func testGlobalOnAllEventsListener() {
   87|      0|        let expectation = XCTestExpectation(description: "Deleted Retrieve Employer")
   88|      0|        let listener = EmployerForTesting.onAllEvents({ (object) in
   89|      0|            XCTAssertEqual(object.string, "string")
   90|      0|            expectation.fulfill()
   91|      0|        })
   92|      0|        employer?.save()
   93|      0|        wait(for: [expectation], timeout: 0.1)
   94|      0|        listener.stop()
   95|      0|    }
   96|       |    
   97|      0|    func testGlobalOnSaveListener() {
   98|      0|        let expectation = XCTestExpectation(description: "Deleted Retrieve Employer")
   99|      0|        let listener = EmployerForTesting.onSaveEvents({ (object) in
  100|      0|            XCTAssertEqual(object.string, "string")
  101|      0|            expectation.fulfill()
  102|      0|        })
  103|      0|        employer?.save()
  104|      0|        wait(for: [expectation], timeout: 0.1)
  105|      0|        listener.stop()
  106|      0|    }
  107|       |    
  108|      0|    func testGlobalOnUpdateListener() {
  109|      0|        let expectation = XCTestExpectation(description: "Deleted Retrieve Employer")
  110|      0|        let listener = EmployerForTesting.onUpdateEvents({ (object) in
  111|      0|            XCTAssertEqual(object.string, "test")
  112|      0|            expectation.fulfill()
  113|      0|        })
  114|      0|        employer?.string = "test"
  115|      0|        try? employer?.update(columns: SundeedColumn("string"))
  116|      0|        wait(for: [expectation], timeout: 1)
  117|      0|        listener.stop()
  118|      0|    }
  119|       |    
  120|      0|    func testGlobalOnRetrieveListener() {
  121|      0|        employer?.save()
  122|      0|        let expectation = XCTestExpectation(description: "Deleted Retrieve Employer")
  123|      0|        let listener = EmployerForTesting.onRetrieveEvents({ (object) in
  124|      0|            XCTAssertEqual(object.string, "string")
  125|      0|            expectation.fulfill()
  126|      0|        })
  127|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  128|      0|            EmployerForTesting.retrieve(completion: { _ in })
  129|      0|        }
  130|      0|        wait(for: [expectation], timeout: 2)
  131|      0|        listener.stop()
  132|      0|    }
  133|       |    
  134|      0|    func testGlobalOnDeleteListener() {
  135|      0|        let expectation = XCTestExpectation(description: "Deleted Retrieve Employer")
  136|      0|        let listener = EmployerForTesting.onDeleteEvents({ (object) in
  137|      0|            XCTAssertEqual(object.string, "string")
  138|      0|            expectation.fulfill()
  139|      0|        })
  140|      0|        let _ = try? employer?.delete()
  141|      0|        wait(for: [expectation], timeout: 0.1)
  142|      0|        listener.stop()
  143|      0|    }
  144|       |}

/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/Main/SundeedQLiteLibraryTests.swift:
    1|       |//
    2|       |//  SundeedQLiteLibraryTests.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 10/5/19.
    6|       |//  Copyright Â© 2019 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import SundeedQLiteLibrary
   11|       |
   12|       |class SundeedQLiteLibraryTests: XCTestCase {
   13|      1|    func testSubscript() {
   14|      1|        let employer = EmployerForTesting()
   15|      1|        employer.string = "string"
   16|      1|        guard let string = employer["string"] as? String else {
   17|      0|            XCTFail("Employer is nil")
   18|      0|            return
   19|      1|        }
   20|      1|        XCTAssertEqual(string, "string")
   21|      1|    }
   22|       |    
   23|      1|    func testWrongSubscript() {
   24|      1|        let employer = EmployerForTesting()
   25|      1|        let string = employer["wrong"] as? String
   26|      1|        XCTAssertNil(string)
   27|      1|    }
   28|       |    
   29|      0|    func testSundeedQLiteMap() {
   30|      0|        let employee = EmployeeForTesting()
   31|      0|        SundeedQLiteMap.references["Test"] = nil
   32|      0|        SundeedQLiteMap.addReference(object: employee,
   33|      0|                                     andValue: "ID_ID" as AnyObject,
   34|      0|                                     andClassName: "Test")
   35|      0|        if let reference = SundeedQLiteMap.references["Test"],
   36|      0|            let employeeRetrieved = reference["ID_ID"] as? EmployeeForTesting {
   37|      0|            XCTAssertEqual(employee.id, employeeRetrieved.id)
   38|      0|        } else {
   39|      0|            XCTFail("Reference nil")
   40|      0|        }
   41|      0|    }
   42|      0|    func testSaveProcessorAcceptData() {
   43|      0|        let object: String = ""
   44|      0|        XCTAssert(SaveProcessor().acceptDataType(forObject: object as AnyObject))
   45|      0|        let  object1: String? = ""
   46|      0|        XCTAssert(SaveProcessor().acceptDataType(forObject: object1 as AnyObject))
   47|      0|        let  object2: Int = 1
   48|      0|        XCTAssert(SaveProcessor().acceptDataType(forObject: object2 as AnyObject))
   49|      0|        let  object3: Int? = 1
   50|      0|        XCTAssert(SaveProcessor().acceptDataType(forObject: object3 as AnyObject))
   51|      0|        let  object4: Double = 1.0
   52|      0|        XCTAssert(SaveProcessor().acceptDataType(forObject: object4 as AnyObject))
   53|      0|        let  object5: Double? = 1.0
   54|      0|        XCTAssert(SaveProcessor().acceptDataType(forObject: object5 as AnyObject))
   55|      0|        let  object6: Float = 1.0
   56|      0|        XCTAssert(SaveProcessor().acceptDataType(forObject: object6 as AnyObject))
   57|      0|        let  object7: Float? = 1.0
   58|      0|        XCTAssert(SaveProcessor().acceptDataType(forObject: object7 as AnyObject))
   59|      0|        let  object8: Bool = true
   60|      0|        XCTAssert(SaveProcessor().acceptDataType(forObject: object8 as AnyObject))
   61|      0|        let  object9: Bool? = true
   62|      0|        XCTAssert(SaveProcessor().acceptDataType(forObject: object9 as AnyObject))
   63|      0|        let  object10: Date = Date()
   64|      0|        XCTAssert(SaveProcessor().acceptDataType(forObject: object10 as AnyObject))
   65|      0|        let  object11: Date? = Date()
   66|      0|        XCTAssert(SaveProcessor().acceptDataType(forObject: object11 as AnyObject))
   67|      0|        let  object12: UIImage = UIImage(named: "image")!
   68|      0|        XCTAssert(SaveProcessor().acceptDataType(forObject: object12 as AnyObject))
   69|      0|        let  object13: UIImage? = UIImage(named: "image")
   70|      0|        XCTAssert(SaveProcessor().acceptDataType(forObject: object13 as AnyObject))
   71|      0|        XCTAssertFalse(SaveProcessor().acceptDataType(forObject: nil))
   72|      0|        XCTAssertFalse(SaveProcessor().acceptDataType(forObject: Type.ceo as AnyObject))
   73|      0|    }
   74|       |    
   75|      0|    func testRetrieveWithWrongTableName() {
   76|      0|        let objectWrapper = ObjectWrapper(tableName: "HHH",
   77|      0|                                          className: "HHH",
   78|      0|                                          objects: [:])
   79|      0|        let result = RetrieveProcessor().retrieve(objectWrapper: objectWrapper) { _ -> ObjectWrapper? in
   80|      0|            return nil
   81|      0|        }
   82|      0|        XCTAssertEqual(result.count, 0)
   83|      0|    }
   84|       |    
   85|      0|    func testGetPrimitiveValuesWithWrongTableName() {
   86|      0|        let result = RetrieveProcessor().getPrimitiveValues(forTable: "WrongTableName",
   87|      0|                                                            withFilter: nil)
   88|      0|        XCTAssertNil(result)
   89|      0|    }
   90|       |    
   91|      0|    func testUpdateWithNoFilter() {
   92|      0|        let query = UpdateStatement(with: "table")
   93|      0|            .add(key: "column1", value: "value1")
   94|      0|            .build()
   95|      0|        XCTAssertEqual(query, "UPDATE table SET column1 = \'value1\' WHERE 1")
   96|      0|    }
   97|       |    
   98|      0|    func testDeleteWithNoFilter() {
   99|      0|        let query = DeleteStatement(with: "table")
  100|      0|            .build()
  101|      0|        XCTAssertEqual(query, "DELETE FROM table WHERE 1")
  102|      0|    }
  103|       |    
  104|      0|    func testQuotationsChange() {
  105|      0|        let quotationForSingleQuote = Statement().getQuotation(forValue: "trying ''")
  106|      0|        XCTAssertEqual(quotationForSingleQuote, "\"")
  107|      0|        let quotationForDoubleQuote = Statement().getQuotation(forValue: "trying \"\"")
  108|      0|        XCTAssertEqual(quotationForDoubleQuote, "\'")
  109|      0|    }
  110|       |    
  111|      0|    func testClassToObjectWrapperWithWrongClass() {
  112|      0|        let wrapper = SundeedQLite.instance.classToObjectWrapper("WrongClass")
  113|      0|        XCTAssertNil(wrapper)
  114|      0|    }
  115|       |    
  116|      0|    func testDeleteWithNoPrimary() {
  117|      0|        do {
  118|      0|            _ = try SundeedQLite.instance.deleteFromDB(object: ClassWithNoPrimary())
  119|      0|            XCTFail("Shouldn't continue")
  120|      0|        } catch {
  121|      0|            guard let sundeedError = error as? SundeedQLiteError else {
  122|      0|                XCTFail("Wrong Error")
  123|      0|                return
  124|      0|            }
  125|      0|            XCTAssert(sundeedError.description == SundeedQLiteError.primaryKeyError(tableName: "ClassWithNoPrimary").description)
  126|      0|        }
  127|      0|    }
  128|       |    
  129|      0|    func testCreateTableWithNilObjectWrapper() {
  130|      0|        let objectWrapper = ObjectWrapper(tableName: "Table",
  131|      0|                                          className: "Class",
  132|      0|                                          objects: nil)
  133|      0|        do {
  134|      0|            try CreateTableProcessor().createTableIfNeeded(for: objectWrapper)
  135|      0|            XCTFail("Weirdly it continued without throwing an error")
  136|      0|        } catch {
  137|      0|            guard let sundeedError = error as? SundeedQLiteError else {
  138|      0|                XCTFail("Wrong Error")
  139|      0|                return
  140|      0|            }
  141|      0|            XCTAssert(sundeedError.description == SundeedQLiteError.noObjectPassed.description)
  142|      0|        }
  143|      0|    }
  144|       |}

/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/Mandatory Array Operator/ArrayMandatoryClasses.swift:
    1|       |//
    2|       |//  ArrayMandatoryClasses.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 5/19/20.
    6|       |//  Copyright Â© 2020 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |@testable import SundeedQLiteLibrary
   11|       |
   12|       |class ClassContainingAMandatoryOptionalArrayWithNil: SundeedQLiter {
   13|       |    var id: String = "ID"
   14|       |    var mandatoryClasses: [MandatoryClass]?
   15|      0|    required init() {}
   16|       |    
   17|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   18|      0|        id <~> map["id"]+
   19|      0|        mandatoryClasses <**> map["mandatoryClasses"]
   20|      0|    }
   21|       |}
   22|       |
   23|       |class ClassContainingAMandatoryArrayWithNil: SundeedQLiter {
   24|       |    var id: String = "ID"
   25|      0|    var mandatoryClasses: [MandatoryClass] = []
   26|      0|    required init() {}
   27|       |
   28|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   29|      0|        id <~> map["id"]+
   30|      0|        mandatoryClasses <**> map["mandatoryClasses"]
   31|      0|    }
   32|       |}
   33|       |
   34|       |class ClassContainingAMandatoryOptionalArrayWithOptionalNil: SundeedQLiter {
   35|       |    var id: String = "ID"
   36|       |    var mandatoryClasses: [MandatoryClass?]?
   37|      0|    required init() {}
   38|       |    
   39|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   40|      0|        id <~> map["id"]+
   41|      0|        mandatoryClasses <**> map["mandatoryClasses"]
   42|      0|    }
   43|       |}
   44|       |
   45|       |class ClassContainingAMandatoryArrayWithOptionalNil: SundeedQLiter {
   46|       |    var id: String = "ID"
   47|      0|    var mandatoryClasses: [MandatoryClass?] = []
   48|      0|    required init() {}
   49|       |    
   50|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   51|      0|        id <~> map["id"]+
   52|      0|        mandatoryClasses <**> map["mandatoryClasses"]
   53|      0|    }
   54|       |}
   55|       |
   56|       |class ClassContainingAMandatoryArrayWithEmpty: SundeedQLiter {
   57|       |    var id: String = "ID"
   58|      0|    var mandatoryClasses: [MandatoryClass] = []
   59|      0|    required init() {}
   60|       |    
   61|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   62|      0|        id <~> map["id"]+
   63|      0|        mandatoryClasses <**> map["mandatoryClasses"]
   64|      0|    }
   65|       |}
   66|       |
   67|       |class ClassContainingAMandatoryOptionalArrayWithOptionalEmpty: SundeedQLiter {
   68|       |    var id: String = "ID"
   69|       |    var mandatoryClasses: [MandatoryClass?]?
   70|      0|    required init() {}
   71|       |    
   72|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   73|      0|        id <~> map["id"]+
   74|      0|        mandatoryClasses <**> map["mandatoryClasses"]
   75|      0|    }
   76|       |}
   77|       |
   78|       |class ClassContainingAMandatoryArrayWithOptionalEmpty: SundeedQLiter {
   79|       |    var id: String = "ID"
   80|      0|    var mandatoryClasses: [MandatoryClass?] = []
   81|      0|    required init() {}
   82|       |    
   83|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   84|      0|        id <~> map["id"]+
   85|      0|        mandatoryClasses <**> map["mandatoryClasses"]
   86|      0|    }
   87|       |}
   88|       |
   89|       |class ClassContainingAMandatoryOptionalArrayWithEmpty: SundeedQLiter {
   90|       |    var id: String = "ID"
   91|       |    var mandatoryClasses: [MandatoryClass]?
   92|      0|    required init() {}
   93|       |    
   94|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   95|      0|        id <~> map["id"]+
   96|      0|        mandatoryClasses <**> map["mandatoryClasses"]
   97|      0|    }
   98|       |}
   99|       |
  100|       |class ClassContainingAMandatoryArrayWithData: SundeedQLiter {
  101|       |    var id: String = "ID"
  102|      0|    var mandatoryClasses: [MandatoryClass] = []
  103|      0|    required init() {}
  104|       |    
  105|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  106|      0|        id <~> map["id"]+
  107|      0|        mandatoryClasses <**> map["mandatoryClasses"]
  108|      0|    }
  109|       |}
  110|       |
  111|       |class ClassContainingAMandatoryOptionalArrayWithData: SundeedQLiter {
  112|       |    var id: String = "ID"
  113|       |    var mandatoryClasses: [MandatoryClass]?
  114|      0|    required init() {}
  115|       |    
  116|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  117|      0|        id <~> map["id"]+
  118|      0|        mandatoryClasses <**> map["mandatoryClasses"]
  119|      0|    }
  120|       |}
  121|       |
  122|       |class ClassContainingAMandatoryOptionalArrayWithOptionalData: SundeedQLiter {
  123|       |    var id: String = "ID"
  124|       |    var mandatoryClasses: [MandatoryClass?]?
  125|      0|    required init() {}
  126|       |    
  127|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  128|      0|        id <~> map["id"]+
  129|      0|        mandatoryClasses <**> map["mandatoryClasses"]
  130|      0|    }
  131|       |}
  132|       |
  133|       |class ClassContainingAMandatoryArrayWithOptionalData: SundeedQLiter {
  134|       |    var id: String = "ID"
  135|      0|    var mandatoryClasses: [MandatoryClass?] = []
  136|      0|    required init() {}
  137|       |    
  138|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  139|      0|        id <~> map["id"]+
  140|      0|        mandatoryClasses <**> map["mandatoryClasses"]
  141|      0|    }
  142|       |}

/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/Mandatory Array Operator/ArrayMandatoryTestWithData.swift:
    1|       |//
    2|       |//  ArrayMandatoryTestWithData.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 5/19/20.
    6|       |//  Copyright Â© 2020 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |//@testable import SundeedQLiteLibrary
   11|       |
   12|       |class ArrayMandatoryTestWithData: XCTestCase {
   13|       |    
   14|      0|    func testClassContainingAMandatoryClassInOptionalArray() {
   15|      0|        let mandatoryClass = MandatoryClass()
   16|      0|        let mainClass = ClassContainingAMandatoryClassInOptionalArray()
   17|      0|        mainClass.mandatoryClasses = [mandatoryClass]
   18|      0|        mainClass.save()
   19|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   20|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   21|      0|            ClassContainingAMandatoryClassInOptionalArray.retrieve(completion: { (retrievedClasses) in
   22|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   23|      0|                expectation.fulfill()
   24|      0|            })
   25|      0|        }
   26|      0|        wait(for: [expectation], timeout: 2)
   27|      0|    }
   28|       |    
   29|      0|    func testClassContainingAMandatoryOptionalClassInArray() {
   30|      0|        let mandatoryClass = MandatoryClass()
   31|      0|        let mainClass = ClassContainingAMandatoryOptionalClassInArray()
   32|      0|        mainClass.mandatoryClasses = [mandatoryClass]
   33|      0|        mainClass.save()
   34|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   35|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   36|      0|            ClassContainingAMandatoryOptionalClassInArray.retrieve(completion: { (retrievedClasses) in
   37|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   38|      0|                expectation.fulfill()
   39|      0|            })
   40|      0|        }
   41|      0|        wait(for: [expectation], timeout: 2)
   42|      0|    }
   43|       |    
   44|      0|    func testClassContainingAMandatoryOptionalClassInOptionalArray() {
   45|      0|        let mandatoryClass = MandatoryClass()
   46|      0|        let mainClass = ClassContainingAMandatoryOptionalClassInOptionalArray()
   47|      0|        mainClass.mandatoryClasses = [mandatoryClass]
   48|      0|        mainClass.save()
   49|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   50|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   51|      0|            ClassContainingAMandatoryOptionalClassInOptionalArray.retrieve(completion: { (retrievedClasses) in
   52|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   53|      0|                expectation.fulfill()
   54|      0|            })
   55|      0|        }
   56|      0|        wait(for: [expectation], timeout: 2)
   57|      0|    }
   58|       |    
   59|      0|    func testClassContainingAMandatoryClassInArray() {
   60|      0|        let mandatoryClass = MandatoryClass()
   61|      0|        let mainClass = ClassContainingAMandatoryClassInArray()
   62|      0|        mainClass.mandatoryClasses = [mandatoryClass]
   63|      0|        mainClass.save()
   64|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   65|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   66|      0|            ClassContainingAMandatoryClassInArray.retrieve(completion: { (retrievedClasses) in
   67|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   68|      0|                expectation.fulfill()
   69|      0|            })
   70|      0|        }
   71|      0|        wait(for: [expectation], timeout: 2)
   72|      0|    }
   73|       |    
   74|      0|    func testClassContainingAMandatoryClass() {
   75|      0|        let mandatoryClass = MandatoryClass()
   76|      0|        let mainClass = ClassContainingAMandatoryClass()
   77|      0|        mainClass.mandatoryClasses = mandatoryClass
   78|      0|        mainClass.save()
   79|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   80|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   81|      0|            ClassContainingAMandatoryClass.retrieve(completion: { (retrievedClasses) in
   82|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   83|      0|                expectation.fulfill()
   84|      0|            })
   85|      0|        }
   86|      0|        wait(for: [expectation], timeout: 2)
   87|      0|    }
   88|       |    
   89|      0|    func testClassContainingAMandatoryOptionalClass() {
   90|      0|        let mandatoryClass = MandatoryClass()
   91|      0|        let mainClass = ClassContainingAMandatoryOptionalClass()
   92|      0|        mainClass.mandatoryClasses = mandatoryClass
   93|      0|        mainClass.save()
   94|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   95|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   96|      0|            ClassContainingAMandatoryOptionalClass.retrieve(completion: { (retrievedClasses) in
   97|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   98|      0|                expectation.fulfill()
   99|      0|            })
  100|      0|        }
  101|      0|        wait(for: [expectation], timeout: 2)
  102|      0|    }
  103|       |    
  104|      0|    func testClassContainingAMandatoryArrayWithData() {
  105|      0|        let mandatoryClass = MandatoryClass()
  106|      0|        mandatoryClass.firstName = "Test"
  107|      0|        let mainClass = ClassContainingAMandatoryArrayWithData()
  108|      0|        mainClass.mandatoryClasses = [mandatoryClass]
  109|      0|        mainClass.save()
  110|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  111|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  112|      0|            ClassContainingAMandatoryArrayWithData
  113|      0|                .retrieve(completion: { (retrievedClasses) in
  114|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  115|      0|                    _ = try? mandatoryClass.delete()
  116|      0|                    ClassContainingAMandatoryArrayWithData.delete()
  117|      0|                expectation.fulfill()
  118|      0|            })
  119|      0|        }
  120|      0|        wait(for: [expectation], timeout: 2)
  121|      0|    }
  122|       |    
  123|      0|    func testClassContainingAMandatoryOptionalArrayWithData() {
  124|      0|        let mandatoryClass = MandatoryClass()
  125|      0|        mandatoryClass.firstName = "Test"
  126|      0|        let mainClass = ClassContainingAMandatoryOptionalArrayWithData()
  127|      0|        mainClass.mandatoryClasses = [mandatoryClass]
  128|      0|        mainClass.save()
  129|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  130|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  131|      0|            ClassContainingAMandatoryOptionalArrayWithData.retrieve(completion: { (retrievedClasses) in
  132|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  133|      0|                _ = try? mandatoryClass.delete()
  134|      0|                ClassContainingAMandatoryOptionalArrayWithData.delete()
  135|      0|                expectation.fulfill()
  136|      0|            })
  137|      0|        }
  138|      0|        wait(for: [expectation], timeout: 2)
  139|      0|    }
  140|       |    
  141|      0|    func testClassContainingAMandatoryOptionalArrayWithOptionalData() {
  142|      0|        let mandatoryClass = MandatoryClass()
  143|      0|        mandatoryClass.firstName = "Test"
  144|      0|        let mainClass = ClassContainingAMandatoryOptionalArrayWithOptionalData()
  145|      0|        mainClass.mandatoryClasses = [mandatoryClass]
  146|      0|        mainClass.save()
  147|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  148|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  149|      0|            ClassContainingAMandatoryOptionalArrayWithOptionalData.retrieve(completion: { (retrievedClasses) in
  150|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  151|      0|                _ = try? mandatoryClass.delete()
  152|      0|                ClassContainingAMandatoryOptionalArrayWithOptionalData.delete()
  153|      0|                expectation.fulfill()
  154|      0|            })
  155|      0|        }
  156|      0|        wait(for: [expectation], timeout: 2)
  157|      0|    }
  158|       |    
  159|      0|    func testClassContainingAMandatoryArrayWithOptionalData() {
  160|      0|        let mandatoryClass = MandatoryClass()
  161|      0|        mandatoryClass.firstName = "Test"
  162|      0|        let mainClass = ClassContainingAMandatoryArrayWithOptionalData()
  163|      0|        mainClass.mandatoryClasses = [mandatoryClass]
  164|      0|        mainClass.save()
  165|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  166|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  167|      0|            ClassContainingAMandatoryArrayWithOptionalData
  168|      0|                .retrieve(completion: { (retrievedClasses) in
  169|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  170|      0|                    _ = try? mandatoryClass.delete()
  171|      0|                    ClassContainingAMandatoryArrayWithOptionalData.delete()
  172|      0|                expectation.fulfill()
  173|      0|            })
  174|      0|        }
  175|      0|        wait(for: [expectation], timeout: 2)
  176|      0|    }
  177|       |    
  178|       |    
  179|       |    
  180|      0|    func testClassContainingAMandatoryArrayWithDataWithReference() {
  181|      0|        let mandatoryClass = MandatoryClass()
  182|      0|        mandatoryClass.firstName = "Test"
  183|      0|        let mainClass = ClassContainingAMandatoryArrayWithData()
  184|      0|        mainClass.mandatoryClasses = [mandatoryClass]
  185|      0|        mainClass.save()
  186|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  187|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  188|      0|            ClassContainingAMandatoryArrayWithData
  189|      0|                .retrieve(completion: { (retrievedClasses) in
  190|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  191|      0|                    ClassContainingAMandatoryArrayWithData.delete()
  192|      0|                expectation.fulfill()
  193|      0|            })
  194|      0|        }
  195|      0|        wait(for: [expectation], timeout: 2)
  196|      0|    }
  197|       |    
  198|      0|    func testClassContainingAMandatoryOptionalArrayWithDataWithReference() {
  199|      0|        let mandatoryClass = MandatoryClass()
  200|      0|        mandatoryClass.firstName = "Test"
  201|      0|        let mainClass = ClassContainingAMandatoryOptionalArrayWithData()
  202|      0|        mainClass.mandatoryClasses = [mandatoryClass]
  203|      0|        mainClass.save()
  204|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  205|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  206|      0|            ClassContainingAMandatoryOptionalArrayWithData.retrieve(completion: { (retrievedClasses) in
  207|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  208|      0|                ClassContainingAMandatoryOptionalArrayWithData.delete()
  209|      0|                expectation.fulfill()
  210|      0|            })
  211|      0|        }
  212|      0|        wait(for: [expectation], timeout: 2)
  213|      0|    }
  214|       |    
  215|      0|    func testClassContainingAMandatoryOptionalArrayWithOptionalDataWithReference() {
  216|      0|        let mandatoryClass = MandatoryClass()
  217|      0|        mandatoryClass.firstName = "Test"
  218|      0|        let mainClass = ClassContainingAMandatoryOptionalArrayWithOptionalData()
  219|      0|        mainClass.mandatoryClasses = [mandatoryClass]
  220|      0|        mainClass.save()
  221|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  222|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  223|      0|            ClassContainingAMandatoryOptionalArrayWithOptionalData.retrieve(completion: { (retrievedClasses) in
  224|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  225|      0|                ClassContainingAMandatoryOptionalArrayWithOptionalData.delete()
  226|      0|                expectation.fulfill()
  227|      0|            })
  228|      0|        }
  229|      0|        wait(for: [expectation], timeout: 2)
  230|      0|    }
  231|       |    
  232|      0|    func testClassContainingAMandatoryArrayWithOptionalDataWithReference() {
  233|      0|        let mandatoryClass = MandatoryClass()
  234|      0|        mandatoryClass.firstName = "Test"
  235|      0|        let mainClass = ClassContainingAMandatoryArrayWithOptionalData()
  236|      0|        mainClass.mandatoryClasses = [mandatoryClass]
  237|      0|        mainClass.save()
  238|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  239|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  240|      0|            ClassContainingAMandatoryArrayWithOptionalData
  241|      0|                .retrieve(completion: { (retrievedClasses) in
  242|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  243|      0|                    ClassContainingAMandatoryArrayWithOptionalData.delete()
  244|      0|                expectation.fulfill()
  245|      0|            })
  246|      0|        }
  247|      0|        wait(for: [expectation], timeout: 2)
  248|      0|    }
  249|       |    
  250|      0|    func testClassContainingParameterIndex() {
  251|      0|        let mainClass = ClassContainingParameterIndex()
  252|      0|        mainClass.save()
  253|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  254|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  255|      0|            ClassContainingParameterIndex.retrieve(completion: { (retrievedClasses) in
  256|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  257|      0|                ClassContainingParameterIndex.delete()
  258|      0|                expectation.fulfill()
  259|      0|            })
  260|      0|        }
  261|      0|        wait(for: [expectation], timeout: 2)
  262|      0|    }
  263|       |}

/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/Mandatory Array Operator/ArrayMandatoryTestWithEmpty.swift:
    1|       |//
    2|       |//  ArrayMandatoryTestWithEmpty.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 5/19/20.
    6|       |//  Copyright Â© 2020 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |
   11|       |class ArrayMandatoryTestWithEmpty: XCTestCase {
   12|      0|    func testClassContainingAMandatoryArrayWithEmpty() {
   13|      0|        let mainClass = ClassContainingAMandatoryArrayWithEmpty()
   14|      0|        mainClass.mandatoryClasses = [MandatoryClass()]
   15|      0|        mainClass.save()
   16|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   17|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   18|      0|            ClassContainingAMandatoryArrayWithEmpty.retrieve(completion: { (retrievedClasses) in
   19|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   20|      0|                ClassContainingAMandatoryArrayWithEmpty.delete()
   21|      0|                expectation.fulfill()
   22|      0|            })
   23|      0|        }
   24|      0|        wait(for: [expectation], timeout: 2)
   25|      0|    }
   26|       |    
   27|      0|    func testClassContainingAMandatoryOptionalArrayWithEmpty() {
   28|      0|        let mainClass = ClassContainingAMandatoryOptionalArrayWithEmpty()
   29|      0|        mainClass.save()
   30|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   31|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   32|      0|            ClassContainingAMandatoryOptionalArrayWithEmpty.retrieve(completion: { (retrievedClasses) in
   33|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   34|      0|                ClassContainingAMandatoryOptionalArrayWithEmpty.delete()
   35|      0|                expectation.fulfill()
   36|      0|            })
   37|      0|        }
   38|      0|        wait(for: [expectation], timeout: 2)
   39|      0|    }
   40|       |    
   41|      0|    func testClassContainingAMandatoryOptionalArrayWithOptionalEmpty() {
   42|      0|        let mainClass = ClassContainingAMandatoryOptionalArrayWithOptionalEmpty()
   43|      0|        mainClass.mandatoryClasses = []
   44|      0|        mainClass.save()
   45|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   46|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   47|      0|            ClassContainingAMandatoryOptionalArrayWithOptionalEmpty.retrieve(completion: { (retrievedClasses) in
   48|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   49|      0|                ClassContainingAMandatoryOptionalArrayWithOptionalEmpty.delete()
   50|      0|                expectation.fulfill()
   51|      0|            })
   52|      0|        }
   53|      0|        wait(for: [expectation], timeout: 2)
   54|      0|    }
   55|       |    
   56|      0|    func testClassContainingAMandatoryArrayWithOptionalEmpty() {
   57|      0|        let mainClass = ClassContainingAMandatoryArrayWithOptionalEmpty()
   58|      0|        mainClass.mandatoryClasses = [MandatoryClass()]
   59|      0|        mainClass.save()
   60|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   61|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   62|      0|            ClassContainingAMandatoryArrayWithOptionalEmpty.retrieve(completion: { (retrievedClasses) in
   63|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   64|      0|                ClassContainingAMandatoryArrayWithOptionalEmpty.delete()
   65|      0|                expectation.fulfill()
   66|      0|            })
   67|      0|        }
   68|      0|        wait(for: [expectation], timeout: 2)
   69|      0|    }
   70|       |}

/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/Mandatory Array Operator/ArrayMandatoryTestWithNil.swift:
    1|       |//
    2|       |//  ArrayMandatoryTestWithNil.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 5/19/20.
    6|       |//  Copyright Â© 2020 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |
   11|       |class ArrayMandatoryTestWithNil: XCTestCase {
   12|      0|    func testClassContainingAMandatoryOptionalArrayWithNil() {
   13|      0|        let mainClass = ClassContainingAMandatoryOptionalArrayWithNil()
   14|      0|        mainClass.save()
   15|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   16|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   17|      0|            ClassContainingAMandatoryOptionalArrayWithNil.retrieve(completion: { (retrievedClasses) in
   18|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   19|      0|                ClassContainingAMandatoryOptionalArrayWithNil.delete()
   20|      0|                expectation.fulfill()
   21|      0|            })
   22|      0|        }
   23|      0|        wait(for: [expectation], timeout: 2)
   24|      0|    }
   25|       |    
   26|      0|    func testClassContainingAMandatoryArrayWithNil() {
   27|      0|        let mainClass = ClassContainingAMandatoryArrayWithNil()
   28|      0|        mainClass.save()
   29|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   30|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   31|      0|            ClassContainingAMandatoryArrayWithNil.retrieve(completion: { (retrievedClasses) in
   32|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   33|      0|                ClassContainingAMandatoryArrayWithNil.delete()
   34|      0|                expectation.fulfill()
   35|      0|            })
   36|      0|        }
   37|      0|        wait(for: [expectation], timeout: 2)
   38|      0|    }
   39|       |    
   40|      0|    func testClassContainingAMandatoryArrayWithOptionalNil() {
   41|      0|        let mainClass = ClassContainingAMandatoryArrayWithOptionalNil()
   42|      0|        mainClass.save()
   43|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   44|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   45|      0|            ClassContainingAMandatoryArrayWithOptionalNil.retrieve(completion: { (retrievedClasses) in
   46|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   47|      0|                ClassContainingAMandatoryArrayWithOptionalNil.delete()
   48|      0|                expectation.fulfill()
   49|      0|            })
   50|      0|        }
   51|      0|        wait(for: [expectation], timeout: 2)
   52|      0|    }
   53|       |    
   54|      0|    func testClassContainingAMandatoryOptionalArrayWithOptionalNil() {
   55|      0|        let mainClass = ClassContainingAMandatoryOptionalArrayWithOptionalNil()
   56|      0|        mainClass.save()
   57|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   58|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   59|      0|            ClassContainingAMandatoryOptionalArrayWithOptionalNil.retrieve(completion: { (retrievedClasses) in
   60|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   61|      0|                ClassContainingAMandatoryOptionalArrayWithOptionalNil.delete()
   62|      0|                expectation.fulfill()
   63|      0|            })
   64|      0|        }
   65|      0|        wait(for: [expectation], timeout: 2)
   66|      0|    }
   67|       |    
   68|      0|    func testClassContainingAMandatoryOptionalArrayWithNilSubObject() {
   69|      0|        let mainClass = ClassContainingAMandatoryOptionalArrayWithNil()
   70|      0|        mainClass.mandatoryClasses = [MandatoryClass()]
   71|      0|        mainClass.save()
   72|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   73|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   74|      0|            ClassContainingAMandatoryOptionalArrayWithNil.retrieve(completion: { (retrievedClasses) in
   75|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   76|      0|                ClassContainingAMandatoryOptionalArrayWithNil.delete()
   77|      0|                expectation.fulfill()
   78|      0|            })
   79|      0|        }
   80|      0|        wait(for: [expectation], timeout: 2)
   81|      0|    }
   82|       |    
   83|      0|    func testClassContainingAMandatoryArrayWithNilSubObject() {
   84|      0|        let mainClass = ClassContainingAMandatoryArrayWithNil()
   85|      0|        mainClass.mandatoryClasses = [MandatoryClass()]
   86|      0|        mainClass.save()
   87|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   88|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   89|      0|            ClassContainingAMandatoryArrayWithNil.retrieve(completion: { (retrievedClasses) in
   90|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   91|      0|                ClassContainingAMandatoryArrayWithNil.delete()
   92|      0|                expectation.fulfill()
   93|      0|            })
   94|      0|        }
   95|      0|        wait(for: [expectation], timeout: 2)
   96|      0|    }
   97|       |    
   98|      0|    func testClassContainingAMandatoryArrayWithOptionalNilSubObject() {
   99|      0|        let mainClass = ClassContainingAMandatoryArrayWithOptionalNil()
  100|      0|        mainClass.mandatoryClasses = [MandatoryClass()]
  101|      0|        mainClass.save()
  102|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  103|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  104|      0|            ClassContainingAMandatoryArrayWithOptionalNil.retrieve(completion: { (retrievedClasses) in
  105|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  106|      0|                ClassContainingAMandatoryArrayWithOptionalNil.delete()
  107|      0|                expectation.fulfill()
  108|      0|            })
  109|      0|        }
  110|      0|        wait(for: [expectation], timeout: 2)
  111|      0|    }
  112|       |    
  113|      0|    func testClassContainingAMandatoryOptionalArrayWithOptionalNilSubObject() {
  114|      0|        let mainClass = ClassContainingAMandatoryOptionalArrayWithOptionalNil()
  115|      0|        mainClass.mandatoryClasses = [MandatoryClass()]
  116|      0|        mainClass.save()
  117|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  118|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  119|      0|            ClassContainingAMandatoryOptionalArrayWithOptionalNil.retrieve(completion: { (retrievedClasses) in
  120|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  121|      0|                ClassContainingAMandatoryOptionalArrayWithOptionalNil.delete()
  122|      0|                expectation.fulfill()
  123|      0|            })
  124|      0|        }
  125|      0|        wait(for: [expectation], timeout: 2)
  126|      0|    }
  127|       |}

/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/Mandatory Operator/MandatoryClasses.swift:
    1|       |//
    2|       |//  MandatoryClasses.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 5/19/20.
    6|       |//  Copyright Â© 2020 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |@testable import SundeedQLiteLibrary
   11|       |
   12|       |class ClassWithMandatoryOptionalString: SundeedQLiter {
   13|       |    var id: String = "qwe"
   14|       |    var mandatory: String?
   15|      0|    required init() {}
   16|       |    
   17|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   18|      0|        id <~> map["id"]+
   19|      0|        mandatory <*> map["mandatory"]
   20|      0|    }
   21|       |}
   22|       |
   23|       |class ClassWithMandatoryOptionalInt: SundeedQLiter {
   24|       |    var id: String = "qwe"
   25|       |    var mandatory: Int?
   26|      0|    required init() {}
   27|       |    
   28|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   29|      0|        id <~> map["id"]+
   30|      0|        mandatory <*> map["mandatory"]
   31|      0|    }
   32|       |}
   33|       |
   34|       |class ClassWithMandatoryOptionalDate: SundeedQLiter {
   35|       |    var id: String = "qwe"
   36|       |    var mandatory: Date?
   37|      0|    required init() {}
   38|       |    
   39|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   40|      0|        id <~> map["id"]+
   41|      0|        mandatory <*> map["mandatory"]
   42|      0|    }
   43|       |}
   44|       |
   45|       |class ClassWithMandatoryOptionalImage: SundeedQLiter {
   46|       |    var id: String = "qwe"
   47|       |    var mandatory: UIImage?
   48|      0|    required init() {}
   49|       |    
   50|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   51|      0|        id <~> map["id"]+
   52|      0|        mandatory <*> map["mandatory"]
   53|      0|    }
   54|       |}
   55|       |
   56|       |class ClassWithMandatoryOptionalDouble: SundeedQLiter {
   57|       |    var id: String = "qwe"
   58|       |    var mandatory: Double?
   59|      0|    required init() {}
   60|       |    
   61|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   62|      0|        id <~> map["id"]+
   63|      0|        mandatory <*> map["mandatory"]
   64|      0|    }
   65|       |}
   66|       |
   67|       |class ClassWithMandatoryOptionalFloat: SundeedQLiter {
   68|       |    var id: String = "qwe"
   69|       |    var mandatory: Float?
   70|      0|    required init() {}
   71|       |    
   72|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   73|      0|        id <~> map["id"]+
   74|      0|        mandatory <*> map["mandatory"]
   75|      0|    }
   76|       |}
   77|       |
   78|       |class ClassWithMandatoryOptionalArrayOfFloats: SundeedQLiter {
   79|       |    var id: String = "qwe"
   80|       |    var mandatory: [Float]?
   81|      0|    required init() {}
   82|       |    
   83|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   84|      0|        id <~> map["id"]+
   85|      0|        mandatory <*> map["mandatory"]
   86|      0|    }
   87|       |}
   88|       |
   89|       |class ClassWithMandatoryOptionalArrayOfOptionalFloats: SundeedQLiter {
   90|       |    var id: String = "qwe"
   91|       |    var mandatory: [Float?]?
   92|      0|    required init() {}
   93|       |    
   94|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   95|      0|        id <~> map["id"]+
   96|      0|        mandatory <*> map["mandatory"]
   97|      0|    }
   98|       |}
   99|       |
  100|       |class ClassWithMandatoryOptionalArrayOfOptionalDoubles: SundeedQLiter {
  101|       |    var id: String = "qwe"
  102|       |    var mandatory: [Double?]?
  103|      0|    required init() {}
  104|       |    
  105|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  106|      0|        id <~> map["id"]+
  107|      0|        mandatory <*> map["mandatory"]
  108|      0|    }
  109|       |}
  110|       |
  111|       |class ClassWithMandatoryOptionalArrayOfDoubles: SundeedQLiter {
  112|       |    var id: String = "qwe"
  113|       |    var mandatory: [Double]?
  114|      0|    required init() {}
  115|       |    
  116|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  117|      0|        id <~> map["id"]+
  118|      0|        mandatory <*> map["mandatory"]
  119|      0|    }
  120|       |}
  121|       |
  122|       |class ClassWithMandatoryOptionalArrayOfOptionalInts: SundeedQLiter {
  123|       |    var id: String = "qwe"
  124|       |    var mandatory: [Int?]?
  125|      0|    required init() {}
  126|       |    
  127|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  128|      0|        id <~> map["id"]+
  129|      0|        mandatory <*> map["mandatory"]
  130|      0|    }
  131|       |}
  132|       |
  133|       |class ClassWithMandatoryOptionalArrayOfInts: SundeedQLiter {
  134|       |    var id: String = "qwe"
  135|       |    var mandatory: [Int]?
  136|      0|    required init() {}
  137|       |    
  138|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  139|      0|        id <~> map["id"]+
  140|      0|        mandatory <*> map["mandatory"]
  141|      0|    }
  142|       |}
  143|       |
  144|       |
  145|       |
  146|       |class ClassWithMandatoryOptionalArrayOfImages: SundeedQLiter {
  147|       |    var id: String = "qwe"
  148|       |    var mandatory: [UIImage]?
  149|      0|    required init() {}
  150|       |    
  151|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  152|      0|        id <~> map["id"]+
  153|      0|        mandatory <*> map["mandatory"]
  154|      0|    }
  155|       |}
  156|       |
  157|       |class ClassWithMandatoryOptionalArrayOfOptionalImages: SundeedQLiter {
  158|       |    var id: String = "qwe"
  159|       |    var mandatory: [UIImage?]?
  160|      0|    required init() {}
  161|       |    
  162|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  163|      0|        id <~> map["id"]+
  164|      0|        mandatory <*> map["mandatory"]
  165|      0|    }
  166|       |}
  167|       |
  168|       |class ClassWithMandatoryOptionalArrayOfStrings: SundeedQLiter {
  169|       |    var id: String = "qwe"
  170|       |    var mandatory: [String]?
  171|      0|    required init() {}
  172|       |    
  173|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  174|      0|        id <~> map["id"]+
  175|      0|        mandatory <*> map["mandatory"]
  176|      0|    }
  177|       |}
  178|       |
  179|       |class ClassWithMandatoryOptionalArrayOfOptionalStrings: SundeedQLiter {
  180|       |    var id: String = "qwe"
  181|       |    var mandatory: [String?]?
  182|      0|    required init() {}
  183|       |    
  184|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  185|      0|        id <~> map["id"]+
  186|      0|        mandatory <*> map["mandatory"]
  187|      0|    }
  188|       |}
  189|       |
  190|       |class ClassWithMandatoryOptionalObjects: SundeedQLiter {
  191|       |    var id: String = "qwe"
  192|       |    var mandatory: MandatoryClass?
  193|      0|    required init() {}
  194|       |    
  195|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  196|      0|        id <~> map["id"]+
  197|      0|        mandatory <*> map["mandatory"]
  198|      0|    }
  199|       |}
  200|       |
  201|       |class ClassWithMandatoryOptionalArrayOfObjects: SundeedQLiter {
  202|       |    var id: String = "qwe"
  203|       |    var mandatory: [MandatoryClass]?
  204|      0|    required init() {}
  205|       |    
  206|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  207|      0|        id <~> map["id"]+
  208|      0|        mandatory <*> map["mandatory"]
  209|      0|    }
  210|       |}
  211|       |
  212|       |class ClassWithMandatoryOptionalArrayOfOptionalObjects: SundeedQLiter {
  213|       |    var id: String = "qwe"
  214|       |    var mandatory: [MandatoryClass?]?
  215|      0|    required init() {}
  216|       |    
  217|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  218|      0|        id <~> map["id"]+
  219|      0|        mandatory <*> map["mandatory"]
  220|      0|    }
  221|       |}

/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/Mandatory Operator/MandatoryOperatorTestWithData.swift:
    1|       |//
    2|       |//  MandatoryOperatorTestWithData.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 5/19/20.
    6|       |//  Copyright Â© 2020 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import XCTest
   11|       |@testable import SundeedQLiteLibrary
   12|       |
   13|       |class MandatoryOperatorTestWithData: XCTestCase {
   14|       |    
   15|      0|    func testClassWithMandatoryOptionalString() {
   16|      0|        let mainClass = ClassWithMandatoryOptionalString()
   17|      0|        mainClass.mandatory = "test"
   18|      0|        mainClass.save()
   19|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   20|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   21|      0|            ClassWithMandatoryOptionalString.retrieve(completion: { (retrievedClasses) in
   22|      0|                XCTAssertEqual(retrievedClasses.count, 1)
   23|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory,
   24|      0|                               mainClass.mandatory)
   25|      0|                ClassWithMandatoryOptionalString.delete()
   26|      0|                expectation.fulfill()
   27|      0|            })
   28|      0|        }
   29|      0|        wait(for: [expectation], timeout: 2)
   30|      0|    }
   31|       |    
   32|      0|    func testClassWithMandatoryOptionalInt() {
   33|      0|        let mainClass = ClassWithMandatoryOptionalInt()
   34|      0|        mainClass.mandatory = 0
   35|      0|        mainClass.save()
   36|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   37|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   38|      0|            ClassWithMandatoryOptionalInt.retrieve(completion: { (retrievedClasses) in
   39|      0|                XCTAssertEqual(retrievedClasses.count, 1)
   40|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory,
   41|      0|                               mainClass.mandatory)
   42|      0|                ClassWithMandatoryOptionalInt.delete()
   43|      0|                expectation.fulfill()
   44|      0|            })
   45|      0|        }
   46|      0|        wait(for: [expectation], timeout: 2)
   47|      0|    }
   48|       |    
   49|      0|    func testClassWithMandatoryOptionalDate() {
   50|      0|        let dateFormatter = DateFormatter()
   51|      0|        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
   52|      0|        let date = dateFormatter.date(from: "2001-07-04T12:08:56.235-0700")
   53|      0|        let mainClass = ClassWithMandatoryOptionalDate()
   54|      0|        mainClass.mandatory = date
   55|      0|        mainClass.save()
   56|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   57|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   58|      0|            ClassWithMandatoryOptionalDate.retrieve(completion: { (retrievedClasses) in
   59|      0|                XCTAssertEqual(retrievedClasses.count, 1)
   60|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory?.timeIntervalSince1970,
   61|      0|                               date?.timeIntervalSince1970)
   62|      0|                ClassWithMandatoryOptionalDate.delete()
   63|      0|                expectation.fulfill()
   64|      0|            })
   65|      0|        }
   66|      0|        wait(for: [expectation], timeout: 2)
   67|      0|    }
   68|       |    
   69|      0|    func testClassWithMandatoryOptionalDouble() {
   70|      0|        let mainClass = ClassWithMandatoryOptionalDouble()
   71|      0|        mainClass.mandatory = 2.0
   72|      0|        mainClass.save()
   73|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   74|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   75|      0|            ClassWithMandatoryOptionalDouble.retrieve(completion: { (retrievedClasses) in
   76|      0|                XCTAssertEqual(retrievedClasses.count, 1)
   77|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory,
   78|      0|                               mainClass.mandatory)
   79|      0|                ClassWithMandatoryOptionalDouble.delete()
   80|      0|                expectation.fulfill()
   81|      0|            })
   82|      0|        }
   83|      0|        wait(for: [expectation], timeout: 2)
   84|      0|    }
   85|       |    
   86|      0|    func testClassWithMandatoryOptionalFloat() {
   87|      0|        let mainClass = ClassWithMandatoryOptionalFloat()
   88|      0|        mainClass.mandatory = 3.0
   89|      0|        mainClass.save()
   90|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   91|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   92|      0|            ClassWithMandatoryOptionalFloat.retrieve(completion: { (retrievedClasses) in
   93|      0|                XCTAssertEqual(retrievedClasses.count, 1)
   94|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory,
   95|      0|                               mainClass.mandatory)
   96|      0|                ClassWithMandatoryOptionalFloat.delete()
   97|      0|                expectation.fulfill()
   98|      0|            })
   99|      0|        }
  100|      0|        wait(for: [expectation], timeout: 2)
  101|      0|    }
  102|       |    
  103|      0|    func testClassWithMandatoryOptionalImage() {
  104|      0|        let mainClass = ClassWithMandatoryOptionalImage()
  105|      0|        mainClass.mandatory = UIImage(named: "image")
  106|      0|        mainClass.save()
  107|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  108|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  109|      0|            ClassWithMandatoryOptionalImage.retrieve(completion: { (retrievedClasses) in
  110|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  111|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory?.jpegData(compressionQuality: 0.9),
  112|      0|                               mainClass.mandatory?.jpegData(compressionQuality: 0.9))
  113|      0|                ClassWithMandatoryOptionalImage.delete()
  114|      0|                expectation.fulfill()
  115|      0|            })
  116|      0|        }
  117|      0|        wait(for: [expectation], timeout: 2)
  118|      0|    }
  119|       |    
  120|      0|    func testClassWithMandatoryOptionalArrayOfImages() {
  121|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfImages()
  122|      0|        mainClass.mandatory = [UIImage(named: "image")!]
  123|      0|        mainClass.save()
  124|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  125|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  126|      0|            ClassWithMandatoryOptionalArrayOfImages.retrieve(completion: { (retrievedClasses) in
  127|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  128|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory?.first?.jpegData(compressionQuality: 0.9),
  129|      0|                               mainClass.mandatory?.first?.jpegData(compressionQuality: 0.9))
  130|      0|                ClassWithMandatoryOptionalArrayOfImages.delete()
  131|      0|                expectation.fulfill()
  132|      0|            })
  133|      0|        }
  134|      0|        wait(for: [expectation], timeout: 2)
  135|      0|    }
  136|       |    
  137|      0|    func testClassWithMandatoryOptionalArrayOfOptionalImages() {
  138|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfOptionalImages()
  139|      0|        mainClass.mandatory = [UIImage(named: "image")]
  140|      0|        mainClass.save()
  141|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  142|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  143|      0|            ClassWithMandatoryOptionalArrayOfOptionalImages.retrieve(completion: { (retrievedClasses) in
  144|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  145|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory?.first??.jpegData(compressionQuality: 0.9),
  146|      0|                               mainClass.mandatory?.first??.jpegData(compressionQuality: 0.9))
  147|      0|                ClassWithMandatoryOptionalArrayOfOptionalImages.delete()
  148|      0|                expectation.fulfill()
  149|      0|            })
  150|      0|        }
  151|      0|        wait(for: [expectation], timeout: 2)
  152|      0|    }
  153|       |    
  154|      0|    func testClassWithMandatoryOptionalArrayOfFloats() {
  155|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfFloats()
  156|      0|        mainClass.mandatory = [3.0]
  157|      0|        mainClass.save()
  158|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  159|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  160|      0|            ClassWithMandatoryOptionalArrayOfFloats.retrieve(completion: { (retrievedClasses) in
  161|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  162|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory,
  163|      0|                               mainClass.mandatory)
  164|      0|                ClassWithMandatoryOptionalArrayOfFloats.delete()
  165|      0|                expectation.fulfill()
  166|      0|            })
  167|      0|        }
  168|      0|        wait(for: [expectation], timeout: 2)
  169|      0|    }
  170|       |    
  171|      0|    func testClassWithMandatoryOptionalArrayOfOptionalFloats() {
  172|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfOptionalFloats()
  173|      0|        mainClass.mandatory = [3.0]
  174|      0|        mainClass.save()
  175|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  176|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  177|      0|            ClassWithMandatoryOptionalArrayOfOptionalFloats.retrieve(completion: { (retrievedClasses) in
  178|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  179|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory,
  180|      0|                               mainClass.mandatory)
  181|      0|                ClassWithMandatoryOptionalArrayOfOptionalFloats.delete()
  182|      0|                expectation.fulfill()
  183|      0|            })
  184|      0|        }
  185|      0|        wait(for: [expectation], timeout: 2)
  186|      0|    }
  187|       |    
  188|      0|    func testClassWithMandatoryOptionalArrayOfDoubles() {
  189|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfDoubles()
  190|      0|        mainClass.mandatory = [3.0]
  191|      0|        mainClass.save()
  192|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  193|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  194|      0|            ClassWithMandatoryOptionalArrayOfDoubles.retrieve(completion: { (retrievedClasses) in
  195|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  196|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory,
  197|      0|                               mainClass.mandatory)
  198|      0|                ClassWithMandatoryOptionalArrayOfDoubles.delete()
  199|      0|                expectation.fulfill()
  200|      0|            })
  201|      0|        }
  202|      0|        wait(for: [expectation], timeout: 2)
  203|      0|    }
  204|       |    
  205|      0|    func testClassWithMandatoryOptionalArrayOfOptionalDoubles() {
  206|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfOptionalDoubles()
  207|      0|        mainClass.mandatory = [3.0]
  208|      0|        mainClass.save()
  209|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  210|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  211|      0|            ClassWithMandatoryOptionalArrayOfOptionalDoubles.retrieve(completion: { (retrievedClasses) in
  212|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  213|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory,
  214|      0|                               mainClass.mandatory)
  215|      0|                ClassWithMandatoryOptionalArrayOfOptionalDoubles.delete()
  216|      0|                expectation.fulfill()
  217|      0|            })
  218|      0|        }
  219|      0|        wait(for: [expectation], timeout: 2)
  220|      0|    }
  221|       |    
  222|      0|    func testClassWithMandatoryOptionalArrayOfInts() {
  223|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfInts()
  224|      0|        mainClass.mandatory = [3]
  225|      0|        mainClass.save()
  226|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  227|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  228|      0|            ClassWithMandatoryOptionalArrayOfInts.retrieve(completion: { (retrievedClasses) in
  229|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  230|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory,
  231|      0|                               mainClass.mandatory)
  232|      0|                ClassWithMandatoryOptionalArrayOfInts.delete()
  233|      0|                expectation.fulfill()
  234|      0|            })
  235|      0|        }
  236|      0|        wait(for: [expectation], timeout: 2)
  237|      0|    }
  238|       |    
  239|      0|    func testClassWithMandatoryOptionalArrayOfOptionalInts() {
  240|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfOptionalInts()
  241|      0|        mainClass.mandatory = [3]
  242|      0|        mainClass.save()
  243|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  244|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  245|      0|            ClassWithMandatoryOptionalArrayOfOptionalInts.retrieve(completion: { (retrievedClasses) in
  246|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  247|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory,
  248|      0|                               mainClass.mandatory)
  249|      0|                ClassWithMandatoryOptionalArrayOfOptionalInts.delete()
  250|      0|                expectation.fulfill()
  251|      0|            })
  252|      0|        }
  253|      0|        wait(for: [expectation], timeout: 2)
  254|      0|    }
  255|       |    
  256|      0|    func testClassWithMandatoryOptionalArrayOfStrings() {
  257|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfStrings()
  258|      0|        mainClass.mandatory = ["TTT"]
  259|      0|        mainClass.save()
  260|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  261|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  262|      0|            ClassWithMandatoryOptionalArrayOfStrings.retrieve(completion: { (retrievedClasses) in
  263|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  264|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory,
  265|      0|                               mainClass.mandatory)
  266|      0|                ClassWithMandatoryOptionalArrayOfStrings.delete()
  267|      0|                expectation.fulfill()
  268|      0|            })
  269|      0|        }
  270|      0|        wait(for: [expectation], timeout: 2)
  271|      0|    }
  272|       |    
  273|      0|    func testClassWithMandatoryOptionalArrayOfOptionalStrings() {
  274|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfOptionalStrings()
  275|      0|        mainClass.mandatory = ["TTT"]
  276|      0|        mainClass.save()
  277|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  278|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  279|      0|            ClassWithMandatoryOptionalArrayOfOptionalStrings.retrieve(completion: { (retrievedClasses) in
  280|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  281|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory,
  282|      0|                               mainClass.mandatory)
  283|      0|                ClassWithMandatoryOptionalArrayOfOptionalStrings.delete()
  284|      0|                expectation.fulfill()
  285|      0|            })
  286|      0|        }
  287|      0|        wait(for: [expectation], timeout: 2)
  288|      0|    }
  289|       |    
  290|      0|    func testClassWithMandatoryOptionalArrayOfObjects() {
  291|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfObjects()
  292|      0|        let mandatoryClass = MandatoryClass()
  293|      0|        mandatoryClass.firstName = "TTT"
  294|      0|        mainClass.mandatory = [mandatoryClass]
  295|      0|        mainClass.save()
  296|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  297|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  298|      0|            ClassWithMandatoryOptionalArrayOfObjects.retrieve(completion: { (retrievedClasses) in
  299|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  300|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory?.first?.firstName,
  301|      0|                               mandatoryClass.firstName)
  302|      0|                ClassWithMandatoryOptionalArrayOfObjects.delete()
  303|      0|                expectation.fulfill()
  304|      0|            })
  305|      0|        }
  306|      0|        wait(for: [expectation], timeout: 2)
  307|      0|    }
  308|       |    
  309|      0|    func testClassWithMandatoryOptionalArrayOfOptionalObjects() {
  310|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfOptionalObjects()
  311|      0|        let mandatoryClass = MandatoryClass()
  312|      0|        mandatoryClass.firstName = "TTT"
  313|      0|        mainClass.mandatory = [mandatoryClass]
  314|      0|        mainClass.save()
  315|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  316|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  317|      0|            ClassWithMandatoryOptionalArrayOfOptionalObjects.retrieve(completion: { (retrievedClasses) in
  318|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  319|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory?.first??.firstName,
  320|      0|                               mandatoryClass.firstName)
  321|      0|                ClassWithMandatoryOptionalArrayOfOptionalObjects.delete()
  322|      0|                expectation.fulfill()
  323|      0|            })
  324|      0|        }
  325|      0|        wait(for: [expectation], timeout: 2)
  326|      0|    }
  327|       |    
  328|      0|    func testClassWithMandatoryOptionalObjects() {
  329|      0|        let mainClass = ClassWithMandatoryOptionalObjects()
  330|      0|        let mandatoryClass = MandatoryClass()
  331|      0|        mandatoryClass.firstName = "TTT"
  332|      0|        mainClass.mandatory = mandatoryClass
  333|      0|        mainClass.save()
  334|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  335|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  336|      0|            ClassWithMandatoryOptionalObjects.retrieve(completion: { (retrievedClasses) in
  337|      0|                XCTAssertEqual(retrievedClasses.count, 1)
  338|      0|                XCTAssertEqual(retrievedClasses.first?.mandatory?.firstName,
  339|      0|                               mainClass.mandatory?.firstName)
  340|      0|                ClassWithMandatoryOptionalObjects.delete()
  341|      0|                expectation.fulfill()
  342|      0|            })
  343|      0|        }
  344|      0|        wait(for: [expectation], timeout: 2)
  345|      0|    }
  346|       |}
  347|       |

/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/Mandatory Operator/MandatoryOperatorTestWithoutData.swift:
    1|       |//
    2|       |//  MandatoryOperatorTest.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 5/19/20.
    6|       |//  Copyright Â© 2020 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import XCTest
   11|       |@testable import SundeedQLiteLibrary
   12|       |
   13|       |class MandatoryOperatorTestWithoutData: XCTestCase {
   14|       |    
   15|      0|    func testClassWithMandatoryOptionalString() {
   16|      0|        let mainClass = ClassWithMandatoryOptionalString()
   17|      0|        mainClass.save()
   18|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   19|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   20|      0|            ClassWithMandatoryOptionalString.retrieve(completion: { (retrievedClasses) in
   21|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   22|      0|                ClassWithMandatoryOptionalString.delete()
   23|      0|                expectation.fulfill()
   24|      0|            })
   25|      0|        }
   26|      0|        wait(for: [expectation], timeout: 2)
   27|      0|    }
   28|       |    
   29|      0|    func testClassWithMandatoryOptionalInt() {
   30|      0|        let mainClass = ClassWithMandatoryOptionalInt()
   31|      0|        mainClass.save()
   32|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   33|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   34|      0|            ClassWithMandatoryOptionalInt.retrieve(completion: { (retrievedClasses) in
   35|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   36|      0|                ClassWithMandatoryOptionalInt.delete()
   37|      0|                expectation.fulfill()
   38|      0|            })
   39|      0|        }
   40|      0|        wait(for: [expectation], timeout: 2)
   41|      0|    }
   42|       |    
   43|      0|    func testClassWithMandatoryOptionalDate() {
   44|      0|        let mainClass = ClassWithMandatoryOptionalDate()
   45|      0|        mainClass.save()
   46|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   47|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   48|      0|            ClassWithMandatoryOptionalDate.retrieve(completion: { (retrievedClasses) in
   49|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   50|      0|                ClassWithMandatoryOptionalDate.delete()
   51|      0|                expectation.fulfill()
   52|      0|            })
   53|      0|        }
   54|      0|        wait(for: [expectation], timeout: 2)
   55|      0|    }
   56|       |    
   57|      0|    func testClassWithMandatoryOptionalDouble() {
   58|      0|        let mainClass = ClassWithMandatoryOptionalDouble()
   59|      0|        mainClass.save()
   60|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   61|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   62|      0|            ClassWithMandatoryOptionalDouble.retrieve(completion: { (retrievedClasses) in
   63|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   64|      0|                ClassWithMandatoryOptionalDouble.delete()
   65|      0|                expectation.fulfill()
   66|      0|            })
   67|      0|        }
   68|      0|        wait(for: [expectation], timeout: 2)
   69|      0|    }
   70|       |    
   71|      0|    func testClassWithMandatoryOptionalFloat() {
   72|      0|        let mainClass = ClassWithMandatoryOptionalFloat()
   73|      0|        mainClass.save()
   74|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   75|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   76|      0|            ClassWithMandatoryOptionalFloat.retrieve(completion: { (retrievedClasses) in
   77|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   78|      0|                ClassWithMandatoryOptionalFloat.delete()
   79|      0|                expectation.fulfill()
   80|      0|            })
   81|      0|        }
   82|      0|        wait(for: [expectation], timeout: 2)
   83|      0|    }
   84|       |    
   85|      0|    func testClassWithMandatoryOptionalImage() {
   86|      0|        let mainClass = ClassWithMandatoryOptionalImage()
   87|      0|        mainClass.save()
   88|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   89|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   90|      0|            ClassWithMandatoryOptionalImage.retrieve(completion: { (retrievedClasses) in
   91|      0|                XCTAssertEqual(retrievedClasses.count, 0)
   92|      0|                ClassWithMandatoryOptionalImage.delete()
   93|      0|                expectation.fulfill()
   94|      0|            })
   95|      0|        }
   96|      0|        wait(for: [expectation], timeout: 2)
   97|      0|    }
   98|       |    
   99|      0|    func testClassWithMandatoryOptionalArrayOfImages() {
  100|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfImages()
  101|      0|        mainClass.save()
  102|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  103|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  104|      0|            ClassWithMandatoryOptionalArrayOfImages.retrieve(completion: { (retrievedClasses) in
  105|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  106|      0|                ClassWithMandatoryOptionalArrayOfImages.delete()
  107|      0|                expectation.fulfill()
  108|      0|            })
  109|      0|        }
  110|      0|        wait(for: [expectation], timeout: 2)
  111|      0|    }
  112|       |    
  113|      0|    func testClassWithMandatoryOptionalArrayOfOptionalImages() {
  114|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfOptionalImages()
  115|      0|        mainClass.save()
  116|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  117|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  118|      0|            ClassWithMandatoryOptionalArrayOfOptionalImages.retrieve(completion: { (retrievedClasses) in
  119|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  120|      0|                ClassWithMandatoryOptionalArrayOfOptionalImages.delete()
  121|      0|                expectation.fulfill()
  122|      0|            })
  123|      0|        }
  124|      0|        wait(for: [expectation], timeout: 2)
  125|      0|    }
  126|       |    
  127|      0|    func testClassWithMandatoryOptionalArrayOfFloats() {
  128|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfFloats()
  129|      0|        mainClass.save()
  130|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  131|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  132|      0|            ClassWithMandatoryOptionalArrayOfFloats.retrieve(completion: { (retrievedClasses) in
  133|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  134|      0|                ClassWithMandatoryOptionalArrayOfFloats.delete()
  135|      0|                expectation.fulfill()
  136|      0|            })
  137|      0|        }
  138|      0|        wait(for: [expectation], timeout: 2)
  139|      0|    }
  140|       |    
  141|      0|    func testClassWithMandatoryOptionalArrayOfOptionalFloats() {
  142|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfOptionalFloats()
  143|      0|        mainClass.save()
  144|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  145|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  146|      0|            ClassWithMandatoryOptionalArrayOfOptionalFloats.retrieve(completion: { (retrievedClasses) in
  147|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  148|      0|                ClassWithMandatoryOptionalArrayOfOptionalFloats.delete()
  149|      0|                expectation.fulfill()
  150|      0|            })
  151|      0|        }
  152|      0|        wait(for: [expectation], timeout: 2)
  153|      0|    }
  154|       |    
  155|      0|    func testClassWithMandatoryOptionalArrayOfDoubles() {
  156|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfDoubles()
  157|      0|        mainClass.save()
  158|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  159|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  160|      0|            ClassWithMandatoryOptionalArrayOfDoubles.retrieve(completion: { (retrievedClasses) in
  161|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  162|      0|                ClassWithMandatoryOptionalArrayOfDoubles.delete()
  163|      0|                expectation.fulfill()
  164|      0|            })
  165|      0|        }
  166|      0|        wait(for: [expectation], timeout: 2)
  167|      0|    }
  168|       |    
  169|      0|    func testClassWithMandatoryOptionalArrayOfOptionalDoubles() {
  170|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfOptionalDoubles()
  171|      0|        mainClass.save()
  172|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  173|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  174|      0|            ClassWithMandatoryOptionalArrayOfOptionalDoubles.retrieve(completion: { (retrievedClasses) in
  175|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  176|      0|                ClassWithMandatoryOptionalArrayOfOptionalDoubles.delete()
  177|      0|                expectation.fulfill()
  178|      0|            })
  179|      0|        }
  180|      0|        wait(for: [expectation], timeout: 2)
  181|      0|    }
  182|       |    
  183|      0|    func testClassWithMandatoryOptionalArrayOfInts() {
  184|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfInts()
  185|      0|        mainClass.save()
  186|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  187|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  188|      0|            ClassWithMandatoryOptionalArrayOfInts.retrieve(completion: { (retrievedClasses) in
  189|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  190|      0|                ClassWithMandatoryOptionalArrayOfInts.delete()
  191|      0|                expectation.fulfill()
  192|      0|            })
  193|      0|        }
  194|      0|        wait(for: [expectation], timeout: 2)
  195|      0|    }
  196|       |    
  197|      0|    func testClassWithMandatoryOptionalArrayOfOptionalInts() {
  198|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfOptionalInts()
  199|      0|        mainClass.save()
  200|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  201|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  202|      0|            ClassWithMandatoryOptionalArrayOfOptionalInts.retrieve(completion: { (retrievedClasses) in
  203|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  204|      0|                ClassWithMandatoryOptionalArrayOfOptionalInts.delete()
  205|      0|                expectation.fulfill()
  206|      0|            })
  207|      0|        }
  208|      0|        wait(for: [expectation], timeout: 2)
  209|      0|    }
  210|       |    
  211|      0|    func testClassWithMandatoryOptionalArrayOfStrings() {
  212|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfStrings()
  213|      0|        mainClass.save()
  214|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  215|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  216|      0|            ClassWithMandatoryOptionalArrayOfStrings.retrieve(completion: { (retrievedClasses) in
  217|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  218|      0|                ClassWithMandatoryOptionalArrayOfStrings.delete()
  219|      0|                expectation.fulfill()
  220|      0|            })
  221|      0|        }
  222|      0|        wait(for: [expectation], timeout: 2)
  223|      0|    }
  224|       |    
  225|      0|    func testClassWithMandatoryOptionalArrayOfOptionalStrings() {
  226|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfOptionalStrings()
  227|      0|        mainClass.save()
  228|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  229|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  230|      0|            ClassWithMandatoryOptionalArrayOfOptionalStrings.retrieve(completion: { (retrievedClasses) in
  231|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  232|      0|                ClassWithMandatoryOptionalArrayOfOptionalStrings.delete()
  233|      0|                expectation.fulfill()
  234|      0|            })
  235|      0|        }
  236|      0|        wait(for: [expectation], timeout: 2)
  237|      0|    }
  238|       |    
  239|      0|    func testClassWithMandatoryOptionalArrayOfObjects() {
  240|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfObjects()
  241|      0|        mainClass.save()
  242|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  243|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  244|      0|            ClassWithMandatoryOptionalArrayOfObjects.retrieve(completion: { (retrievedClasses) in
  245|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  246|      0|                ClassWithMandatoryOptionalArrayOfObjects.delete()
  247|      0|                expectation.fulfill()
  248|      0|            })
  249|      0|        }
  250|      0|        wait(for: [expectation], timeout: 2)
  251|      0|    }
  252|       |    
  253|      0|    func testClassWithMandatoryOptionalArrayOfOptionalObjects() {
  254|      0|        let mainClass = ClassWithMandatoryOptionalArrayOfOptionalObjects()
  255|      0|        mainClass.save()
  256|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  257|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  258|      0|            ClassWithMandatoryOptionalArrayOfOptionalObjects.retrieve(completion: { (retrievedClasses) in
  259|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  260|      0|                ClassWithMandatoryOptionalArrayOfOptionalObjects.delete()
  261|      0|                expectation.fulfill()
  262|      0|            })
  263|      0|        }
  264|      0|        wait(for: [expectation], timeout: 2)
  265|      0|    }
  266|       |    
  267|      0|    func testClassWithMandatoryOptionalObjects() {
  268|      0|        let mainClass = ClassWithMandatoryOptionalObjects()
  269|      0|        mainClass.save()
  270|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  271|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  272|      0|            ClassWithMandatoryOptionalObjects.retrieve(completion: { (retrievedClasses) in
  273|      0|                XCTAssertEqual(retrievedClasses.count, 0)
  274|      0|                ClassWithMandatoryOptionalObjects.delete()
  275|      0|                expectation.fulfill()
  276|      0|            })
  277|      0|        }
  278|      0|        wait(for: [expectation], timeout: 2)
  279|      0|    }
  280|       |}

/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/No Primary Keys/NoPrimariesClasses.swift:
    1|       |//
    2|       |//  NoPrimariesClasses.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 5/19/20.
    6|       |//  Copyright Â© 2020 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import SundeedQLiteLibrary
   11|       |
   12|       |class ClassWithNoPrimaryWithImage: SundeedQLiter {
   13|       |    var image: UIImage?
   14|      0|    required init() {}
   15|       |    
   16|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   17|      0|        image <~> map["image"]
   18|      0|    }
   19|       |    
   20|      0|    func fillData() {
   21|      0|        image = UIImage(named: "image")
   22|      0|    }
   23|       |}
   24|       |
   25|       |class ClassWithNoPrimaryWithImageArray: SundeedQLiter {
   26|       |    var images: [UIImage?]?
   27|      0|    required init() {}
   28|       |    
   29|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   30|      0|        images <~> map["images"]
   31|      0|    }
   32|       |    
   33|      0|    func fillData() {
   34|      0|        images = [UIImage(named: "image")]
   35|      0|    }
   36|       |}
   37|       |
   38|       |class ClassWithNoPrimaryWithPrimitiveArray: SundeedQLiter {
   39|       |    var strings: [String]?
   40|      0|    required init() {}
   41|       |    
   42|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   43|      0|        strings <~> map["strings"]
   44|      0|    }
   45|       |    
   46|      0|    func fillData() {
   47|      0|        strings = ["test"]
   48|      0|    }
   49|       |}
   50|       |
   51|       |class ClassWithNoPrimaryWithDate: SundeedQLiter {
   52|       |    var date: Date?
   53|      0|    required init() {}
   54|       |    
   55|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   56|      0|        date <~> map["date"]
   57|      0|    }
   58|       |    
   59|      0|    func fillData() {
   60|      0|        date = Date()
   61|      0|    }
   62|       |}
   63|       |
   64|       |
   65|       |class ClassWithNoPrimaryWithSubClass: SundeedQLiter {
   66|       |    var object: EmployeeForTesting?
   67|      0|    required init() {}
   68|       |    
   69|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   70|      0|        object <~> map["object"]
   71|      0|    }
   72|       |    
   73|      0|    func fillData() {
   74|      0|        object = EmployeeForTesting(id: "TestID")
   75|      0|    }
   76|       |    
   77|       |}
   78|       |
   79|       |class ClassWithNoPrimaryWithSubClassArray: SundeedQLiter {
   80|       |    var objects: [EmployeeForTesting?]?
   81|      0|    required init() {}
   82|       |    
   83|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
   84|      0|        objects <~> map["objects"]
   85|      0|    }
   86|       |    
   87|      0|    func fillData() {
   88|      0|        objects = [EmployeeForTesting(id: "TestID")]
   89|      0|    }
   90|       |    
   91|       |}
   92|       |
   93|       |
   94|       |class ClassWithNoPrimary: SundeedQLiter {
   95|       |    var firstName: String?
   96|       |    var lastName: String?
   97|      0|    required init() {}
   98|       |    
   99|      0|    func sundeedQLiterMapping(map: SundeedQLiteMap) {
  100|      0|        firstName <~> map["firstName"]
  101|      0|        lastName <~> map["lastName"]
  102|      0|    }
  103|       |    
  104|      0|    func fillData() {
  105|      0|        firstName = "TestFirst"
  106|      0|        lastName = "TestLast"
  107|      0|    }
  108|       |    
  109|       |}

/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/No Primary Keys/OperationTestsWithoutPrimaryKey.swift:
    1|       |//
    2|       |//  OperationTestsWithoutPrimaryKey.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 5/16/20.
    6|       |//  Copyright Â© 2020 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import SundeedQLiteLibrary
   11|       |
   12|       |class OperationTestsWithoutPrimaryKey: XCTestCase {
   13|       |    var noPrimary: ClassWithNoPrimary?
   14|       |    var employerWithNoPrimary: EmployerWithNoPrimaryForTesting?
   15|       |    
   16|       |    
   17|      0|    override func setUp() {
   18|      0|        employerWithNoPrimary = EmployerWithNoPrimaryForTesting()
   19|      0|        employerWithNoPrimary?.fillData()
   20|      0|        noPrimary = ClassWithNoPrimary()
   21|      0|        noPrimary?.fillData()
   22|      0|        noPrimary?.save()
   23|      0|    }
   24|       |    
   25|      0|    override func tearDown() {
   26|      0|        SundeedQLite.deleteDatabase()
   27|      0|        noPrimary = nil
   28|      0|        employerWithNoPrimary = nil
   29|      0|    }
   30|       |    
   31|       |    
   32|      0|    func testSaveEmployerWithNoPrimary() {
   33|      0|        employerWithNoPrimary?.save()
   34|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   35|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   36|      0|            EmployerWithNoPrimaryForTesting
   37|      0|                .retrieve(completion: { (employers) in
   38|      0|                    XCTAssert(employers.isEmpty)
   39|      0|                    expectation.fulfill()
   40|      0|                })
   41|      0|        }
   42|      0|        wait(for: [expectation], timeout: 1)
   43|      0|    }
   44|       |    
   45|       |    
   46|      0|    func testRetrieve() {
   47|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   48|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.8) {
   49|      0|            ClassWithNoPrimary.retrieve(completion: { (noPrimaries) in
   50|      0|                guard let noPrimary = noPrimaries.first else {
   51|      0|                    XCTFail("Couldn't Retrieve From Database")
   52|      0|                    return
   53|      0|                }
   54|      0|                XCTAssert(noPrimary.firstName == "TestFirst")
   55|      0|                XCTAssert(noPrimary.lastName == "TestLast")
   56|      0|                expectation.fulfill()
   57|      0|            })
   58|      0|        }
   59|      0|        wait(for: [expectation], timeout: 1)
   60|      0|    }
   61|       |    
   62|      0|    func testRetrieveWithFilter() {
   63|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   64|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   65|      0|            ClassWithNoPrimary.retrieve(withFilter: SundeedColumn("firstName") == "TestFirst",
   66|      0|                                        completion: { (noPrimaries) in
   67|      0|                                            guard let noPrimary = noPrimaries.first else {
   68|      0|                                                XCTFail("Couldn't Retrieve From Database")
   69|      0|                                                return
   70|      0|                                            }
   71|      0|                                            XCTAssert(noPrimary.firstName == "TestFirst")
   72|      0|                                            XCTAssert(noPrimary.lastName == "TestLast")
   73|      0|                                            expectation.fulfill()
   74|      0|            })
   75|      0|        }
   76|      0|        wait(for: [expectation], timeout: 1)
   77|      0|    }
   78|       |    
   79|      0|    func testUpdate() {
   80|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   81|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   82|      0|            do {
   83|      0|                self.noPrimary?.firstName = "TestFirstUpdated"
   84|      0|                try self.noPrimary?.update(columns: SundeedColumn("firstName"))
   85|      0|                XCTFail("It shouldn't be able to update")
   86|      0|            } catch {
   87|      0|                expectation.fulfill()
   88|      0|            }
   89|      0|            
   90|      0|        }
   91|      0|        wait(for: [expectation], timeout: 2)
   92|      0|    }
   93|       |    
   94|      0|    func testGlobalUpdate() {
   95|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   96|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   97|      0|            do {
   98|      0|                try ClassWithNoPrimary.update(changes: SundeedColumn("firstName") <~ "TestFirstUpdated")
   99|      0|                XCTFail("It shouldn't be able to update")
  100|      0|            } catch {
  101|      0|                expectation.fulfill()
  102|      0|            }
  103|      0|            
  104|      0|        }
  105|      0|        wait(for: [expectation], timeout: 1)
  106|      0|    }
  107|       |    
  108|       |}

/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/Operations/OperationTests.swift:
    1|       |//
    2|       |//  OperationTests.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 5/16/20.
    6|       |//  Copyright Â© 2020 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import SundeedQLiteLibrary
   11|       |
   12|       |class OperationTests: XCTestCase {
   13|      0|    var employer: EmployerForTesting? = EmployerForTesting()
   14|       |    
   15|      0|    override func setUp() {
   16|      0|        EmployerForTesting.delete()
   17|      0|        EmployeeForTesting.delete()
   18|      0|        employer?.fillData()
   19|      0|        employer?.save()
   20|      0|    }
   21|      0|    override class func tearDown() {
   22|      0|        SundeedQLite.deleteDatabase()
   23|      0|        UserDefaults.standard.removeObject(forKey: Sundeed.shared.shouldCopyDatabaseToFilePathKey)
   24|      0|    }
   25|       |    
   26|      0|    func testDeleting() {
   27|      0|        let expectation = XCTestExpectation(description: "Deleted Retrieve Employer")
   28|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   29|      0|            do {
   30|      0|                if try !(self.employer?.delete() ?? false) {
   31|      0|                    XCTFail("Couldn't delete class")
   32|      0|                } else {
   33|      0|                    
   34|      0|                }
   35|      0|            } catch {
   36|      0|                XCTFail("Couldn't delete class")
   37|      0|            }
   38|      0|            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   39|      0|                EmployerForTesting.retrieve(completion: { (allEmployers) in
   40|      0|                    XCTAssert(allEmployers.isEmpty)
   41|      0|                    expectation.fulfill()
   42|      0|                })
   43|      0|            }
   44|      0|        }
   45|      0|        wait(for: [expectation], timeout: 6.0)
   46|      0|    }
   47|       |    
   48|      0|    func testDeletingAll() {
   49|      0|        let expectation = XCTestExpectation(description: "Deleted Retrieve Employer")
   50|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   51|      0|            EmployerForTesting.delete()
   52|      0|            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   53|      0|                EmployerForTesting.retrieve(completion: { (allEmployers) in
   54|      0|                    XCTAssert(allEmployers.isEmpty)
   55|      0|                    expectation.fulfill()
   56|      0|                })
   57|      0|            }
   58|      0|        }
   59|      0|        wait(for: [expectation], timeout: 6.0)
   60|      0|    }
   61|       |    
   62|      0|    func testRetrieve() {
   63|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   64|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.6) {
   65|      0|            EmployerForTesting.retrieve(completion: { (allEmployers) in
   66|      0|                guard let employer = allEmployers.first else {
   67|      0|                    XCTFail("Couldn't Retrieve From Database")
   68|      0|                    return
   69|      0|                }
   70|      0|                self.checkEmployer(employer)
   71|      0|                expectation.fulfill()
   72|      0|            })
   73|      0|        }
   74|      0|        wait(for: [expectation], timeout: 4.0)
   75|      0|    }
   76|       |    
   77|      0|    func testRetrieveWithFilter() {
   78|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   79|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   80|      0|            EmployerForTesting.retrieve(withFilter: SundeedColumn("string") == "string",
   81|      0|                                        completion: { (allEmployers) in
   82|      0|                                            guard let employer = allEmployers.first else {
   83|      0|                                                XCTFail("Couldn't Retrieve From Database")
   84|      0|                                                return
   85|      0|                                            }
   86|      0|                                            self.checkEmployer(employer)
   87|      0|                                            expectation.fulfill()
   88|      0|            })
   89|      0|        }
   90|      0|        wait(for: [expectation], timeout: 2.0)
   91|      0|    }
   92|       |    
   93|      0|    func testRetrieveWithWrongFilter() {
   94|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   95|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   96|      0|            EmployerForTesting.retrieve(withFilter: SundeedColumn("string") == "ABCD",
   97|      0|                                        completion: { (allEmployers) in
   98|      0|                                            XCTAssertEqual(allEmployers.count, 0)
   99|      0|                                            expectation.fulfill()
  100|      0|            })
  101|      0|        }
  102|      0|        wait(for: [expectation], timeout: 2.0)
  103|      0|    }
  104|       |    
  105|       |    
  106|      0|    func testRetrieveWithSortingIntAsc() {
  107|      0|        let expectation = XCTestExpectation(description: "Retrieve Sorted Employer")
  108|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
  109|      0|            let employer2 = EmployerForTesting()
  110|      0|            employer2.fillData()
  111|      0|            employer2.string = "str"
  112|      0|            employer2.integer = 2
  113|      0|            employer2.save()
  114|      0|            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  115|      0|                EmployerForTesting.retrieve(orderBy: SundeedColumn("integer"),
  116|      0|                                            ascending: true,
  117|      0|                                            completion: { (allEmployers) in
  118|      0|                                                XCTAssertEqual(allEmployers.count, 2)
  119|      0|                                                let firstEmployer = allEmployers[0]
  120|      0|                                                let secondEmployer = allEmployers[1]
  121|      0|                                                self.checkEmployer(firstEmployer)
  122|      0|                                                secondEmployer.integer = 2
  123|      0|                                                expectation.fulfill()
  124|      0|                })
  125|      0|            }
  126|      0|        }
  127|      0|        wait(for: [expectation], timeout: 2)
  128|      0|    }
  129|       |    
  130|      0|    func testRetrieveWithSortingIntDesc() {
  131|      0|        let expectation = XCTestExpectation(description: "Retrieve Sorted Employer")
  132|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
  133|      0|            let employer2 = EmployerForTesting()
  134|      0|            employer2.fillData()
  135|      0|            employer2.string = "stri"
  136|      0|            employer2.integer = 3
  137|      0|            employer2.save()
  138|      0|            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  139|      0|                EmployerForTesting.retrieve(orderBy: SundeedColumn("integer"),
  140|      0|                                            ascending: false,
  141|      0|                                            completion: { (allEmployers) in
  142|      0|                                                XCTAssertEqual(allEmployers.count, 2)
  143|      0|                                                let firstEmployer = allEmployers[0]
  144|      0|                                                let secondEmployer = allEmployers[1]
  145|      0|                                                firstEmployer.integer = 3
  146|      0|                                                self.checkEmployer(secondEmployer)
  147|      0|                                                expectation.fulfill()
  148|      0|                })
  149|      0|            }
  150|      0|        }
  151|      0|        wait(for: [expectation], timeout: 2)
  152|      0|    }
  153|       |    
  154|      0|    func testRetrieveWithSortingStringAsc() {
  155|      0|        let expectation = XCTestExpectation(description: "Retrieve Sorted Employer")
  156|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
  157|      0|            let employer2 = EmployerForTesting()
  158|      0|            employer2.fillData()
  159|      0|            employer2.string = "string2"
  160|      0|            employer2.integer = 2
  161|      0|            employer2.save()
  162|      0|            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  163|      0|                EmployerForTesting.retrieve(orderBy: SundeedColumn("string"),
  164|      0|                                            ascending: true,
  165|      0|                                            completion: { (allEmployers) in
  166|      0|                                                XCTAssertEqual(allEmployers.count, 2)
  167|      0|                                                let firstEmployer = allEmployers[0]
  168|      0|                                                let secondEmployer = allEmployers[1]
  169|      0|                                                self.checkEmployer(firstEmployer)
  170|      0|                                                secondEmployer.integer = 2
  171|      0|                                                expectation.fulfill()
  172|      0|                })
  173|      0|            }
  174|      0|        }
  175|      0|        wait(for: [expectation], timeout: 2)
  176|      0|    }
  177|       |    
  178|      0|    func testRetrieveWithSortingStringDesc() {
  179|      0|        let expectation = XCTestExpectation(description: "Retrieve Sorted Employer")
  180|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
  181|      0|            let employer2 = EmployerForTesting()
  182|      0|            employer2.fillData()
  183|      0|            employer2.string = "string3"
  184|      0|            employer2.integer = 3
  185|      0|            employer2.save()
  186|      0|            DispatchQueue.main.asyncAfter(deadline: .now() + 0.8) {
  187|      0|                EmployerForTesting
  188|      0|                    .retrieve(orderBy: SundeedColumn("string"),
  189|      0|                              ascending: false,
  190|      0|                              completion: { (allEmployers) in
  191|      0|                                XCTAssertEqual(allEmployers.count, 2)
  192|      0|                                guard allEmployers.count == 2 else {
  193|      0|                                    XCTFail()
  194|      0|                                    return
  195|      0|                                }
  196|      0|                                let firstEmployer = allEmployers[0]
  197|      0|                                let secondEmployer = allEmployers[1]
  198|      0|                                firstEmployer.integer = 3
  199|      0|                                self.checkEmployer(secondEmployer)
  200|      0|                                expectation.fulfill()
  201|      0|                    })
  202|      0|            }
  203|      0|        }
  204|      0|        wait(for: [expectation], timeout: 2)
  205|      0|    }
  206|       |    
  207|      0|    func testRetrieveWithSortingDateAsc() {
  208|      0|        let expectation = XCTestExpectation(description: "Retrieve Sorted Employer")
  209|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
  210|      0|            let employer2 = EmployerForTesting()
  211|      0|            employer2.fillData()
  212|      0|            employer2.string = "string2"
  213|      0|            employer2.integer = 2
  214|      0|            employer2.date = Date().addingTimeInterval(500)
  215|      0|            employer2.save()
  216|      0|            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  217|      0|                EmployerForTesting.retrieve(orderBy: SundeedColumn("date"),
  218|      0|                                            ascending: true,
  219|      0|                                            completion: { (allEmployers) in
  220|      0|                                                XCTAssertEqual(allEmployers.count, 2)
  221|      0|                                                let firstEmployer = allEmployers[0]
  222|      0|                                                let secondEmployer = allEmployers[1]
  223|      0|                                                self.checkEmployer(firstEmployer)
  224|      0|                                                secondEmployer.integer = 2
  225|      0|                                                expectation.fulfill()
  226|      0|                })
  227|      0|            }
  228|      0|        }
  229|      0|        wait(for: [expectation], timeout: 2)
  230|      0|    }
  231|       |    
  232|      0|    func testRetrieveWithSortingDateDesc() {
  233|      0|        let expectation = XCTestExpectation(description: "Retrieve Sorted Employer")
  234|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
  235|      0|            let employer2 = EmployerForTesting()
  236|      0|            employer2.fillData()
  237|      0|            employer2.string = "string3"
  238|      0|            employer2.integer = 3
  239|      0|            employer2.date = Date().addingTimeInterval(500)
  240|      0|            employer2.save()
  241|      0|            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  242|      0|                EmployerForTesting.retrieve(orderBy: SundeedColumn("date"),
  243|      0|                                            ascending: false,
  244|      0|                                            completion: { (allEmployers) in
  245|      0|                                                XCTAssertEqual(allEmployers.count, 2)
  246|      0|                                                let firstEmployer = allEmployers[0]
  247|      0|                                                let secondEmployer = allEmployers[1]
  248|      0|                                                firstEmployer.integer = 3
  249|      0|                                                self.checkEmployer(secondEmployer)
  250|      0|                                                expectation.fulfill()
  251|      0|                })
  252|      0|            }
  253|      0|        }
  254|      0|        wait(for: [expectation], timeout: 2)
  255|      0|    }
  256|       |    
  257|      0|    func testRetrieveWithSortingEnumAsc() {
  258|      0|        let expectation = XCTestExpectation(description: "Retrieve Sorted Employer")
  259|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
  260|      0|            let employer2 = EmployerForTesting()
  261|      0|            employer2.fillData()
  262|      0|            employer2.string = "string2"
  263|      0|            employer2.integer = 2
  264|      0|            employer2.type = .ceo
  265|      0|            employer2.save()
  266|      0|            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  267|      0|                EmployerForTesting.retrieve(orderBy: SundeedColumn("type"),
  268|      0|                                            ascending: true,
  269|      0|                                            completion: { (allEmployers) in
  270|      0|                                                XCTAssertEqual(allEmployers.count, 2)
  271|      0|                                                let firstEmployer = allEmployers[0]
  272|      0|                                                let secondEmployer = allEmployers[1]
  273|      0|                                                self.checkEmployer(firstEmployer)
  274|      0|                                                secondEmployer.integer = 2
  275|      0|                                                expectation.fulfill()
  276|      0|                })
  277|      0|            }
  278|      0|        }
  279|      0|        wait(for: [expectation], timeout: 2)
  280|      0|    }
  281|       |    
  282|      0|    func testRetrieveWithSortingEnumDesc() {
  283|      0|        let expectation = XCTestExpectation(description: "Retrieve Sorted Employer")
  284|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
  285|      0|            let employer2 = EmployerForTesting()
  286|      0|            employer2.fillData()
  287|      0|            employer2.string = "string3"
  288|      0|            employer2.integer = 3
  289|      0|            employer2.type = .ceo
  290|      0|            employer2.save()
  291|      0|            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  292|      0|                EmployerForTesting.retrieve(orderBy: SundeedColumn("type"),
  293|      0|                                            ascending: false,
  294|      0|                                            completion: { (allEmployers) in
  295|      0|                                                XCTAssertEqual(allEmployers.count, 2)
  296|      0|                                                let firstEmployer = allEmployers[0]
  297|      0|                                                let secondEmployer = allEmployers[1]
  298|      0|                                                self.checkEmployer(firstEmployer)
  299|      0|                                                secondEmployer.integer = 2
  300|      0|                                                expectation.fulfill()
  301|      0|                })
  302|      0|            }
  303|      0|        }
  304|      0|        wait(for: [expectation], timeout: 2)
  305|      0|    }
  306|       |    
  307|      0|    func testNoPrimaryForClassWithSubclass() {
  308|      0|        let classWithNoPrimaryWithSubClass = ClassWithNoPrimaryWithSubClass()
  309|      0|        classWithNoPrimaryWithSubClass.fillData()
  310|      0|        classWithNoPrimaryWithSubClass.save()
  311|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  312|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  313|      0|            ClassWithNoPrimaryWithSubClass.retrieve(completion: { (results) in
  314|      0|                XCTAssert(results.isEmpty)
  315|      0|                expectation.fulfill()
  316|      0|            })
  317|      0|        }
  318|      0|        wait(for: [expectation], timeout: 1)
  319|      0|    }
  320|       |    
  321|      0|    func testNoPrimaryForClassWithSubclassArray() {
  322|      0|        let classWithNoPrimaryWithSubClassArray = ClassWithNoPrimaryWithSubClassArray()
  323|      0|        classWithNoPrimaryWithSubClassArray.fillData()
  324|      0|        classWithNoPrimaryWithSubClassArray.save()
  325|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  326|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  327|      0|            ClassWithNoPrimaryWithSubClassArray.retrieve(completion: { (results) in
  328|      0|                XCTAssert(results.isEmpty)
  329|      0|                expectation.fulfill()
  330|      0|            })
  331|      0|        }
  332|      0|        wait(for: [expectation], timeout: 1)
  333|      0|    }
  334|       |    
  335|      0|    func testNoPrimaryForClassWithImage() {
  336|      0|        let classWithNoPrimaryWithImage = ClassWithNoPrimaryWithImage()
  337|      0|        classWithNoPrimaryWithImage.fillData()
  338|      0|        classWithNoPrimaryWithImage.save()
  339|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  340|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  341|      0|            ClassWithNoPrimaryWithImage.retrieve(completion: { (results) in
  342|      0|                XCTAssert(results.isEmpty)
  343|      0|                expectation.fulfill()
  344|      0|            })
  345|      0|        }
  346|      0|        wait(for: [expectation], timeout: 1)
  347|      0|    }
  348|       |    
  349|      0|    func testNoPrimaryForClassWithImageArray() {
  350|      0|        ClassWithNoPrimaryWithImageArray.delete()
  351|      0|        let classWithNoPrimaryWithImageArray = ClassWithNoPrimaryWithImageArray()
  352|      0|        classWithNoPrimaryWithImageArray.fillData()
  353|      0|        classWithNoPrimaryWithImageArray.save()
  354|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  355|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.8) {
  356|      0|            ClassWithNoPrimaryWithImageArray.retrieve(completion: { (results) in
  357|      0|                XCTAssertEqual(results.count, 1)
  358|      0|                XCTAssert(results.first?.images == nil)
  359|      0|                expectation.fulfill()
  360|      0|            })
  361|      0|        }
  362|      0|        wait(for: [expectation], timeout: 1)
  363|      0|    }
  364|       |    
  365|      0|    func testNoPrimaryForClassWithPrimitiveArray() {
  366|      0|        let classWithNoPrimaryWithPrimitiveArray = ClassWithNoPrimaryWithPrimitiveArray()
  367|      0|        classWithNoPrimaryWithPrimitiveArray.fillData()
  368|      0|        classWithNoPrimaryWithPrimitiveArray.save()
  369|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  370|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  371|      0|            ClassWithNoPrimaryWithPrimitiveArray.retrieve(completion: { (results) in
  372|      0|                XCTAssert(results.isEmpty)
  373|      0|                expectation.fulfill()
  374|      0|            })
  375|      0|        }
  376|      0|        wait(for: [expectation], timeout: 1)
  377|      0|    }
  378|       |    
  379|      0|    func testNoPrimaryForClassWithDate() {
  380|      0|        let classWithNoPrimaryWithDate = ClassWithNoPrimaryWithDate()
  381|      0|        classWithNoPrimaryWithDate.fillData()
  382|      0|        classWithNoPrimaryWithDate.save()
  383|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  384|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  385|      0|            ClassWithNoPrimaryWithDate.retrieve(completion: { (results) in
  386|      0|                XCTAssert(results.isEmpty)
  387|      0|                expectation.fulfill()
  388|      0|            })
  389|      0|        }
  390|      0|        wait(for: [expectation], timeout: 1)
  391|      0|    }
  392|       |    
  393|      0|    func testArraySaving() {
  394|      0|        guard let employer = employer else {
  395|      0|            XCTFail("Employer is nil")
  396|      0|            return
  397|      0|        }
  398|      0|        let employer2 = EmployerForTesting()
  399|      0|        employer2.fillData()
  400|      0|        employer2.string = "string1"
  401|      0|        employer2.integer = 2
  402|      0|        [employer2,employer].save()
  403|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
  404|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
  405|      0|            EmployerForTesting.retrieve(completion: { (allEmployers) in
  406|      0|                guard let employer1 = allEmployers.first else {
  407|      0|                    XCTFail("Couldn't Retrieve From Database")
  408|      0|                    return
  409|      0|                }
  410|      0|                self.checkEmployer(allEmployers[1])
  411|      0|                XCTAssert(employer1.integer == 2)
  412|      0|                XCTAssert(employer1.string == "string1")
  413|      0|                expectation.fulfill()
  414|      0|            })
  415|      0|        }
  416|      0|        wait(for: [expectation], timeout: 5)
  417|      0|        
  418|      0|    }
  419|       |    
  420|       |    
  421|       |    
  422|       |    
  423|      0|    func testUpdateWithNoChanges() {
  424|      0|        do {
  425|      0|            try EmployerForTesting.update()
  426|      0|        } catch {
  427|      0|            guard let sundeedError = error as? SundeedQLiteError else {
  428|      0|                XCTFail("Wrong Error")
  429|      0|                return
  430|      0|            }
  431|      0|            XCTAssert(sundeedError.description == SundeedQLiteError.noChangesMade(tableName: "EmployerForTesting").description)
  432|      0|        }
  433|      0|    }
  434|       |    
  435|      0|    private func checkEmployer(_ employer: EmployerForTesting) {
  436|      0|        XCTAssertEqual(employer.type, .manager)
  437|      0|        XCTAssertEqual(employer.mandatoryType, .ceo)
  438|      0|        XCTAssertEqual(employer.arrayOfTypes, [.manager, .ceo])
  439|      0|        XCTAssertEqual(employer.optionalArrayOfTypes, [.manager, .ceo])
  440|      0|        XCTAssertEqual(employer.optionalArrayOfOptionalTypes, [.manager, .ceo])
  441|      0|        XCTAssertEqual(employer.arrayOfOptionalTypes, [.manager, .ceo])
  442|      0|        XCTAssertEqual(employer.string, "string")
  443|      0|        XCTAssertEqual(employer.optionalString, "optionalString")
  444|      0|        XCTAssertNotNil(employer.object)
  445|      0|        XCTAssertNotNil(employer.optionalObject)
  446|      0|        XCTAssertEqual(employer.integer, 1)
  447|      0|        XCTAssertEqual(employer.optionalInteger, 2)
  448|      0|        XCTAssertEqual(employer.double, 3.0)
  449|      0|        XCTAssertEqual(employer.optionalDouble, 4.0)
  450|      0|        XCTAssertEqual(employer.float, 5.0)
  451|      0|        XCTAssertEqual(employer.optionalFloat, 6.0)
  452|      0|        XCTAssertEqual(employer.bool, true)
  453|      0|        XCTAssertEqual(employer.optionalBool, true)
  454|      0|        XCTAssertNotNil(employer.date)
  455|      0|        XCTAssertNotNil(employer.optionalDate)
  456|      0|        XCTAssertEqual(employer.image.jpegData(compressionQuality: 1),
  457|      0|                       UIImage(named: "image")?.jpegData(compressionQuality: 1))
  458|      0|        XCTAssertEqual(employer.optionalImage?.jpegData(compressionQuality: 1),
  459|      0|                       UIImage(named: "image")?.jpegData(compressionQuality: 1))
  460|      0|        XCTAssertEqual(employer.arrayOfStrings, ["string1", "string2"])
  461|      0|        XCTAssertEqual(employer.arrayOfOptionalStrings, ["string3"])
  462|      0|        XCTAssertEqual(employer.optionalArrayOfStrings, ["string4", "string6"])
  463|      0|        XCTAssertEqual(employer.optionalArrayOfOptionalStrings, ["string7"])
  464|      0|        XCTAssertNotNil(employer.arrayOfObjects)
  465|      0|        XCTAssertFalse(employer.arrayOfObjects.isEmpty)
  466|      0|        XCTAssertNotNil(employer.arrayOfOptionalObjects)
  467|      0|        XCTAssertNotNil(employer.optionalArrayOfObjects)
  468|      0|        XCTAssertNotNil(employer.optionalArrayOfOptionalObjects)
  469|      0|        XCTAssertEqual(employer.arrayOfIntegers[0], 1)
  470|      0|        XCTAssertEqual(employer.arrayOfIntegers[1], 2)
  471|      0|        XCTAssertEqual(employer.arrayOfOptionalIntegers[0], 2)
  472|      0|        XCTAssertEqual(employer.optionalArrayOfIntegers?[0], 1)
  473|      0|        XCTAssertEqual(employer.optionalArrayOfIntegers?[1], 2)
  474|      0|        XCTAssertEqual(employer.optionalArrayOfOptionalIntegers?[0], 2)
  475|      0|        XCTAssertEqual(employer.arrayOfDoubles[0], 3.0)
  476|      0|        XCTAssertEqual(employer.arrayOfDoubles[1], 4.0)
  477|      0|        XCTAssertEqual(employer.arrayOfOptionalDoubles[0], 4.0)
  478|      0|        XCTAssertEqual(employer.optionalArrayOfDoubles?[0], 3.0)
  479|      0|        XCTAssertEqual(employer.optionalArrayOfDoubles?[1], 4.0)
  480|      0|        XCTAssertEqual(employer.optionalArrayOfOptionalDoubles?[0], 4.0)
  481|      0|        XCTAssertEqual(employer.arrayOfFloats[0], 5.0)
  482|      0|        XCTAssertEqual(employer.arrayOfFloats[1], 6.0)
  483|      0|        XCTAssertEqual(employer.arrayOfOptionalFloats[0], 6.0)
  484|      0|        XCTAssertEqual(employer.optionalArrayOfFloats?[0], 5.0)
  485|      0|        XCTAssertEqual(employer.optionalArrayOfFloats?[1], 6.0)
  486|      0|        XCTAssertEqual(employer.optionalArrayOfOptionalFloats?[0], 6.0)
  487|      0|        XCTAssertTrue(employer.arrayOfBools[0])
  488|      0|        XCTAssertFalse(employer.arrayOfBools[1])
  489|      0|        XCTAssertTrue(employer.arrayOfOptionalBools[0] ?? false)
  490|      0|        XCTAssertTrue(employer.optionalArrayOfBools?[0] ?? false)
  491|      0|        XCTAssertFalse(employer.optionalArrayOfBools?[1] ?? true)
  492|      0|        XCTAssertTrue(employer.optionalArrayOfOptionalBools?[0] ?? false)
  493|      0|        XCTAssertNotNil(employer.arrayOfDates)
  494|      0|        XCTAssertNotNil(employer.arrayOfOptionalDates)
  495|      0|        XCTAssertNotNil(employer.optionalArrayOfDates)
  496|      0|        XCTAssertNotNil(employer.optionalArrayOfOptionalDates)
  497|      0|        XCTAssertNotNil(employer.arrayOfImages)
  498|      0|        XCTAssertEqual(employer.arrayOfImages.first?.jpegData(compressionQuality: 1),
  499|      0|                       UIImage(named: "image")?.jpegData(compressionQuality: 1))
  500|      0|        XCTAssertNotNil(employer.arrayOfOptionalImages)
  501|      0|        XCTAssertEqual(employer.arrayOfOptionalImages
  502|      0|            .first??.jpegData(compressionQuality: 1),
  503|      0|                       UIImage(named: "image")?.jpegData(compressionQuality: 1))
  504|      0|        XCTAssertNotNil(employer.optionalArrayOfImages)
  505|      0|        XCTAssertNotNil(employer.optionalArrayOfOptionalImages)
  506|      0|        XCTAssertNil(employer.nilString)
  507|      0|        XCTAssertNil(employer.nilObject)
  508|      0|        XCTAssertNil(employer.nilInteger)
  509|      0|        XCTAssertNil(employer.nilDouble)
  510|      0|        XCTAssertNil(employer.nilFloat)
  511|      0|        XCTAssertNil(employer.nilBool)
  512|      0|        XCTAssertNil(employer.nilDate)
  513|      0|        XCTAssertNil(employer.nilImage)
  514|      0|        XCTAssertNil(employer.nilArrayOfStrings)
  515|      0|        XCTAssertNil(employer.nilArrayOfOptionalStrings)
  516|      0|        XCTAssertNil(employer.nilArrayOfObjects)
  517|      0|        XCTAssertNil(employer.nilArrayOfOptionalObjects)
  518|      0|        XCTAssertNil(employer.nilArrayOfDoubles)
  519|      0|        XCTAssertNil(employer.nilArrayOfOptionalDoubles)
  520|      0|        XCTAssertNil(employer.nilArrayOfFloats)
  521|      0|        XCTAssertNil(employer.nilArrayOfOptionalFloats)
  522|      0|        XCTAssertNil(employer.nilArrayOfBools)
  523|      0|        XCTAssertNil(employer.nilArrayOfOptionalBools)
  524|      0|        XCTAssertNil(employer.nilArrayOfDates)
  525|      0|        XCTAssertNil(employer.nilArrayOfOptionalDates)
  526|      0|        XCTAssertNil(employer.nilArrayOfImages)
  527|      0|        XCTAssertNil(employer.nilArrayOfOptionalImages)
  528|      0|        XCTAssertEqual(employer.emptyArrayOfStrings.count, 0)
  529|      0|        XCTAssertEqual(employer.emptyArrayOfOptionalStrings.count, 0)
  530|      0|        XCTAssertEqual(employer.emptyArrayOfObjects.count, 0)
  531|      0|        XCTAssertEqual(employer.emptyArrayOfOptionalObjects.count, 0)
  532|      0|        XCTAssertEqual(employer.emptyArrayOfDoubles.count, 0)
  533|      0|        XCTAssertEqual(employer.emptyArrayOfOptionalDoubles.count, 0)
  534|      0|        XCTAssertEqual(employer.emptyArrayOfFloats.count, 0)
  535|      0|        XCTAssertEqual(employer.emptyArrayOfOptionalFloats.count, 0)
  536|      0|        XCTAssertEqual(employer.emptyArrayOfBools.count, 0)
  537|      0|        XCTAssertEqual(employer.emptyArrayOfOptionalBools.count, 0)
  538|      0|        XCTAssertEqual(employer.emptyArrayOfDates.count, 0)
  539|      0|        XCTAssertEqual(employer.emptyArrayOfOptionalDates.count, 0)
  540|      0|        XCTAssertEqual(employer.emptyArrayOfImages.count, 0)
  541|      0|        XCTAssertEqual(employer.emptyArrayOfOptionalImages.count, 0)
  542|      0|    }
  543|       |}

/Users/noursandid/Desktop/LibraryGihub/SundeedQLite/SundeedQLiteLibraryTests/Updates/UpdateTests.swift:
    1|       |//
    2|       |//  UpdateTests.swift
    3|       |//  SundeedQLiteLibraryTests
    4|       |//
    5|       |//  Created by Nour Sandid on 5/19/20.
    6|       |//  Copyright Â© 2020 LUMBERCODE. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import SundeedQLiteLibrary
   11|       |
   12|       |class UpdateTests: XCTestCase {
   13|      0|    var employer: EmployerForTesting? = EmployerForTesting()
   14|       |    
   15|      0|    override func setUp() {
   16|      0|        EmployerForTesting.delete()
   17|      0|        EmployeeForTesting.delete()
   18|      0|        employer?.fillData()
   19|      0|        employer?.save()
   20|      0|    }
   21|      0|    override class func tearDown() {
   22|      0|        SundeedQLite.deleteDatabase()
   23|      0|        UserDefaults.standard.removeObject(forKey: Sundeed.shared.shouldCopyDatabaseToFilePathKey)
   24|      0|    }
   25|       |    
   26|      0|    func testGlobalUpdate() {
   27|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   28|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.8) {
   29|      0|            do {
   30|      0|                try EmployerForTesting.update(changes: SundeedColumn("optionalString") <~ "test",
   31|      0|                                              withFilter: SundeedColumn("string") == "string")
   32|      0|                DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   33|      0|                    EmployerForTesting.retrieve(withFilter: SundeedColumn("string") == "string",
   34|      0|                                                completion: { (allEmployers) in
   35|      0|                                                    guard let employer = allEmployers.first else {
   36|      0|                                                        XCTFail("Couldn't Retrieve From Database")
   37|      0|                                                        return
   38|      0|                                                    }
   39|      0|                                                    XCTAssert(employer.optionalString == "test")
   40|      0|                                                    expectation.fulfill()
   41|      0|                    })
   42|      0|                }
   43|      0|            } catch {
   44|      0|                XCTFail("Couldn't update Global Employer Table \(error)")
   45|      0|            }
   46|      0|        }
   47|      0|        wait(for: [expectation], timeout: 8.0)
   48|      0|    }
   49|       |    
   50|       |    
   51|      0|    func testUpdate() {
   52|      0|        let expectation = XCTestExpectation(description: "Retrieve Employer")
   53|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
   54|      0|            do {
   55|      0|                self.employer?.optionalString = "test"
   56|      0|                self.employer?.object.firstName = "testtt"
   57|      0|                self.employer?.arrayOfStrings.append("Hello")
   58|      0|                self.employer?.arrayOfOptionalImages.append(UIImage(named: "image"))
   59|      0|                self.employer?.arrayOfImages.append(UIImage(named: "image")!)
   60|      0|                self.employer?.nilImage = UIImage(named: "image")!
   61|      0|                self.employer?.nilDate = Date()
   62|      0|                let employee = EmployeeForTesting(id: "LLLLLLL")
   63|      0|                self.employer?.arrayOfObjects.append(employee)
   64|      0|                try self.employer?.update(columns: SundeedColumn("optionalString"),
   65|      0|                                          SundeedColumn("object"),
   66|      0|                                          SundeedColumn("arrayOfStrings"),
   67|      0|                                          SundeedColumn("arrayOfOptionalImages"),
   68|      0|                                          SundeedColumn("arrayOfImages"),
   69|      0|                                          SundeedColumn("nilImage"),
   70|      0|                                          SundeedColumn("nilDate"),
   71|      0|                                          SundeedColumn("arrayOfObjects")
   72|      0|                )
   73|      0|                DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
   74|      0|                    EmployerForTesting.retrieve(completion: { (allEmployers) in
   75|      0|                        guard let employer1 = allEmployers.first else {
   76|      0|                            XCTFail("Couldn't Retrieve From Database")
   77|      0|                            return
   78|      0|                        }
   79|      0|                        XCTAssert(employer1.optionalString == "test")
   80|      0|                        XCTAssert(employer1.object.firstName == "testtt")
   81|      0|                        XCTAssert(employer1.arrayOfStrings.contains("Hello"))
   82|      0|                        XCTAssert(employer1.arrayOfOptionalImages.count == 2)
   83|      0|                        XCTAssertEqual(employer1.arrayOfOptionalImages.first??.jpegData(compressionQuality: 1),
   84|      0|                                       UIImage(named: "image")?.jpegData(compressionQuality: 1))
   85|      0|                        XCTAssertEqual(employer1.arrayOfOptionalImages[1]?.jpegData(compressionQuality: 1),
   86|      0|                                       UIImage(named: "image")?.jpegData(compressionQuality: 1))
   87|      0|                        XCTAssert(employer1.arrayOfImages.count == 3)
   88|      0|                        XCTAssertEqual(employer1.arrayOfImages.first?.jpegData(compressionQuality: 1),
   89|      0|                                       UIImage(named: "image")?.jpegData(compressionQuality: 1))
   90|      0|                        XCTAssertEqual(employer1.arrayOfImages[1].jpegData(compressionQuality: 1),
   91|      0|                                       UIImage(named: "image")?.jpegData(compressionQuality: 1))
   92|      0|                        XCTAssertEqual(employer1.arrayOfImages[2].jpegData(compressionQuality: 1),
   93|      0|                                       UIImage(named: "image")?.jpegData(compressionQuality: 1))
   94|      0|                        XCTAssertNotNil(employer1.nilImage)
   95|      0|                        XCTAssertEqual(employer1.nilImage?.jpegData(compressionQuality: 1),
   96|      0|                                       UIImage(named: "image")?.jpegData(compressionQuality: 1))
   97|      0|                        XCTAssertNotNil(employer1.nilDate)
   98|      0|                        XCTAssert(employer1.arrayOfObjects.contains(where: {$0.id == "LLLLLLL" }))
   99|      0|                        expectation.fulfill()
  100|      0|                    })
  101|      0|                }
  102|      0|            } catch {
  103|      0|                guard let sundeedError = error as? SundeedQLiteError else {
  104|      0|                    XCTFail("Wrong Error")
  105|      0|                    return
  106|      0|                }
  107|      0|                XCTFail(sundeedError.description)
  108|      0|            }
  109|      0|        }
  110|      0|        wait(for: [expectation], timeout: 5.0)
  111|      0|    }
  112|       |    
  113|      0|    func testWrongColumnNameUpdate() {
  114|      0|        do {
  115|      0|            try self.employer?.update(columns: SundeedColumn("wrongColumnName"))
  116|      0|        } catch {
  117|      0|            guard let sundeedError = error as? SundeedQLiteError else {
  118|      0|                XCTFail("Wrong Error")
  119|      0|                return
  120|      0|            }
  121|      0|            XCTAssert(sundeedError.description == SundeedQLiteError.noColumnWithThisName(tableName: "EmployerForTesting",
  122|      0|                columnName: "wrongColumnName").description)
  123|      0|        }
  124|      0|    }
  125|       |}

